{"type":"summary","summary":"Git Workflow: Sync Projects Across Locations","leafUuid":"c4917430-f1ff-4d3d-91e1-5d7c3a7b8702"}
{"type":"summary","summary":"Git Workflow Optimization for Cross-Location Work","leafUuid":"404b037b-3a67-47ea-8810-bf57e49560cd"}
{"type":"summary","summary":"API Login Troubleshooting and Exit Command","leafUuid":"3f6fdef5-1227-4c0e-b4cc-7adab0e523f5"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","type":"user","message":{"role":"user","content":"commit and push"},"uuid":"16c7acf1-ad78-436f-9d0b-9834cc3e971a","timestamp":"2025-07-19T11:10:08.926Z"}
{"parentUuid":"16c7acf1-ad78-436f-9d0b-9834cc3e971a","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01BnqT1qhLws3rjTUbU4FLK2","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll commit and push the current changes for you."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4321,"cache_read_input_tokens":10491,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRGGsokqp779uQKNPFjRn","type":"assistant","uuid":"7dcfb907-054c-43bb-8d17-41d8d19f426d","timestamp":"2025-07-19T11:10:11.667Z"}
{"parentUuid":"7dcfb907-054c-43bb-8d17-41d8d19f426d","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01BnqT1qhLws3rjTUbU4FLK2","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014ivRCoPganAUdQYkz8Pr3q","name":"Bash","input":{"command":"git status","description":"Check current git status"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4321,"cache_read_input_tokens":10491,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRGGsokqp779uQKNPFjRn","type":"assistant","uuid":"e3bc1ac3-0a76-4962-bdcd-92e2e0c556ba","timestamp":"2025-07-19T11:10:12.482Z"}
{"parentUuid":"e3bc1ac3-0a76-4962-bdcd-92e2e0c556ba","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01BnqT1qhLws3rjTUbU4FLK2","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01V5AD1HaH2DcmP4jWBvGo5y","name":"Bash","input":{"command":"git diff","description":"Show staged and unstaged changes"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4321,"cache_read_input_tokens":10491,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRGGsokqp779uQKNPFjRn","type":"assistant","uuid":"25f04c4f-9d68-4894-b805-803122709ee4","timestamp":"2025-07-19T11:10:13.157Z"}
{"parentUuid":"25f04c4f-9d68-4894-b805-803122709ee4","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01BnqT1qhLws3rjTUbU4FLK2","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011mJ5h9HYiueKTEVo8JEUrr","name":"Bash","input":{"command":"git log --oneline -5","description":"Show recent commit messages for style reference"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4321,"cache_read_input_tokens":10491,"output_tokens":207,"service_tier":"standard"}},"requestId":"req_011CRGGsokqp779uQKNPFjRn","type":"assistant","uuid":"2a25a852-df29-40b1-8673-26f1a8af3611","timestamp":"2025-07-19T11:10:13.903Z"}
{"parentUuid":"2a25a852-df29-40b1-8673-26f1a8af3611","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014ivRCoPganAUdQYkz8Pr3q","type":"tool_result","content":"On branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   CLAUDE.md\n\tdeleted:    shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tprojects/-home-yanggf--claude/2f2f865a-9a39-4f2d-9347-3306632ef7a4.jsonl\n\tprojects/-home-yanggf--claude/3612d768-7c76-4977-8beb-0c5ca64b5d2a.jsonl\n\tprojects/-home-yanggf--claude/9abd77ba-6e41-4e43-aff2-a3e7b0694c78.jsonl\n\tprojects/-home-yanggf-a-shesocial/286cb41e-f555-44b9-998a-06dd6ed6dfb5.jsonl\n\tshell-snapshots/snapshot-zsh-1752921583783-epqjit.sh\n\tshell-snapshots/snapshot-zsh-1752923348403-8ogyuu.sh\n\ttodos/286cb41e-f555-44b9-998a-06dd6ed6dfb5-agent-286cb41e-f555-44b9-998a-06dd6ed6dfb5.json\n\ttodos/2f2f865a-9a39-4f2d-9347-3306632ef7a4-agent-2f2f865a-9a39-4f2d-9347-3306632ef7a4.json\n\ttodos/3612d768-7c76-4977-8beb-0c5ca64b5d2a-agent-3612d768-7c76-4977-8beb-0c5ca64b5d2a.json\n\ttodos/9abd77ba-6e41-4e43-aff2-a3e7b0694c78-agent-9abd77ba-6e41-4e43-aff2-a3e7b0694c78.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")","is_error":false}]},"uuid":"c750432a-15f0-46e2-82d2-2d953792d182","timestamp":"2025-07-19T11:10:13.983Z","toolUseResult":{"stdout":"On branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   CLAUDE.md\n\tdeleted:    shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tprojects/-home-yanggf--claude/2f2f865a-9a39-4f2d-9347-3306632ef7a4.jsonl\n\tprojects/-home-yanggf--claude/3612d768-7c76-4977-8beb-0c5ca64b5d2a.jsonl\n\tprojects/-home-yanggf--claude/9abd77ba-6e41-4e43-aff2-a3e7b0694c78.jsonl\n\tprojects/-home-yanggf-a-shesocial/286cb41e-f555-44b9-998a-06dd6ed6dfb5.jsonl\n\tshell-snapshots/snapshot-zsh-1752921583783-epqjit.sh\n\tshell-snapshots/snapshot-zsh-1752923348403-8ogyuu.sh\n\ttodos/286cb41e-f555-44b9-998a-06dd6ed6dfb5-agent-286cb41e-f555-44b9-998a-06dd6ed6dfb5.json\n\ttodos/2f2f865a-9a39-4f2d-9347-3306632ef7a4-agent-2f2f865a-9a39-4f2d-9347-3306632ef7a4.json\n\ttodos/3612d768-7c76-4977-8beb-0c5ca64b5d2a-agent-3612d768-7c76-4977-8beb-0c5ca64b5d2a.json\n\ttodos/9abd77ba-6e41-4e43-aff2-a3e7b0694c78-agent-9abd77ba-6e41-4e43-aff2-a3e7b0694c78.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"c750432a-15f0-46e2-82d2-2d953792d182","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011mJ5h9HYiueKTEVo8JEUrr","type":"tool_result","content":"5d75778 Enable projects/ tracking for work continuity between locations\ne83456b Remove todos/ from gitignore to enable todo file tracking\nbb9722f Add session data and failed logs patterns to gitignore\n3742bf3 Add IDE lock files to gitignore\ne47a79f Add shell snapshot","is_error":false}]},"uuid":"11d2c4cd-717a-41a4-bdb6-3b43d830b020","timestamp":"2025-07-19T11:10:14.001Z","toolUseResult":{"stdout":"5d75778 Enable projects/ tracking for work continuity between locations\ne83456b Remove todos/ from gitignore to enable todo file tracking\nbb9722f Add session data and failed logs patterns to gitignore\n3742bf3 Add IDE lock files to gitignore\ne47a79f Add shell snapshot","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"11d2c4cd-717a-41a4-bdb6-3b43d830b020","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01V5AD1HaH2DcmP4jWBvGo5y","type":"tool_result","content":"diff --git a/CLAUDE.md b/CLAUDE.md\nindex 924556d..1b54704 100644\n--- a/CLAUDE.md\n+++ b/CLAUDE.md\n@@ -25,6 +25,10 @@\n - Use merge strategy for pulls: `git pull --no-rebase`\n - For unrelated histories: `git pull --no-rebase --allow-unrelated-histories`\n \n+### Cross-Location Workflow\n+- Pull before starting work: `git pull`\n+- Commit and push at milestones: `git add . && git commit -m \"milestone message\" && git push`\n+\n - update docs before commit\n \n ## Database Considerations\ndiff --git a/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh b/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\ndeleted file mode 100644\nindex 03cf33e..0000000\n--- a/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\n+++ /dev/null\n@@ -1,8268 +0,0 @@\n-# Snapshot file\n-# Unset all aliases to avoid conflicts with functions\n-unalias -a 2>/dev/null || true\n-# Functions\n-VCS_INFO_formats () {\n-\tsetopt localoptions noksharrays NO_shwordsplit\n-\tlocal msg tmp\n-\tlocal -i i\n-\tlocal -A hook_com\n-\thook_com=(action \"$1\" action_orig \"$1\" branch \"$2\" branch_orig \"$2\" base \"$3\" base_orig \"$3\" staged \"$4\" staged_orig \"$4\" unstaged \"$5\" unstaged_orig \"$5\" revision \"$6\" revision_orig \"$6\" misc \"$7\" misc_orig \"$7\" vcs \"${vcs}\" vcs_orig \"${vcs}\") \n-\thook_com[base-name]=\"${${hook_com[base]}:t}\" \n-\thook_com[base-name_orig]=\"${hook_com[base_name]}\" \n-\thook_com[subdir]=\"$(VCS_INFO_reposub ${hook_com[base]})\" \n-\thook_com[subdir_orig]=\"${hook_com[subdir]}\" \n-\t: vcs_info-patch-9b9840f2-91e5-4471-af84-9e9a0dc68c1b\n-\tfor tmp in base base-name branch misc revision subdir\n-\tdo\n-\t\thook_com[$tmp]=\"${hook_com[$tmp]//\\%/%%}\" \n-\tdone\n-\tVCS_INFO_hook 'post-backend'\n-\tif [[ -n ${hook_com[action]} ]]\n-\tthen\n-\t\tzstyle -a \":vcs_info:${vcs}:${usercontext}:${rrn}\" actionformats msgs\n-\t\t(( ${#msgs} < 1 )) && msgs[1]=' (%s)-[%b|%a]%u%c-' \n-\telse\n-\t\tzstyle -a \":vcs_info:${vcs}:${usercontext}:${rrn}\" formats msgs\n-\t\t(( ${#msgs} < 1 )) && msgs[1]=' (%s)-[%b]%u%c-' \n-\tfi\n-\tif [[ -n ${hook_com[staged]} ]]\n-\tthen\n-\t\tzstyle -s \":vcs_info:${vcs}:${usercontext}:${rrn}\" stagedstr tmp\n-\t\t[[ -z ${tmp} ]] && hook_com[staged]='S'  || hook_com[staged]=${tmp} \n-\tfi\n-\tif [[ -n ${hook_com[unstaged]} ]]\n-\tthen\n-\t\tzstyle -s \":vcs_info:${vcs}:${usercontext}:${rrn}\" unstagedstr tmp\n-\t\t[[ -z ${tmp} ]] && hook_com[unstaged]='U'  || hook_com[unstaged]=${tmp} \n-\tfi\n-\tif [[ ${quiltmode} != 'standalone' ]] && VCS_INFO_hook \"pre-addon-quilt\"\n-\tthen\n-\t\tlocal REPLY\n-\t\tVCS_INFO_quilt addon\n-\t\thook_com[quilt]=\"${REPLY}\" \n-\t\tunset REPLY\n-\telif [[ ${quiltmode} == 'standalone' ]]\n-\tthen\n-\t\thook_com[quilt]=${hook_com[misc]} \n-\tfi\n-\t(( ${#msgs} > maxexports )) && msgs[$(( maxexports + 1 )),-1]=() \n-\tfor i in {1..${#msgs}}\n-\tdo\n-\t\tif VCS_INFO_hook \"set-message\" $(( $i - 1 )) \"${msgs[$i]}\"\n-\t\tthen\n-\t\t\tzformat -f msg ${msgs[$i]} a:${hook_com[action]} b:${hook_com[branch]} c:${hook_com[staged]} i:${hook_com[revision]} m:${hook_com[misc]} r:${hook_com[base-name]} s:${hook_com[vcs]} u:${hook_com[unstaged]} Q:${hook_com[quilt]} R:${hook_com[base]} S:${hook_com[subdir]}\n-\t\t\tmsgs[$i]=${msg} \n-\t\telse\n-\t\t\tmsgs[$i]=${hook_com[message]} \n-\t\tfi\n-\tdone\n-\thook_com=() \n-\tbackend_misc=() \n-\treturn 0\n-}\n-add-zsh-hook () {\n-\temulate -L zsh\n-\tlocal -a hooktypes\n-\thooktypes=(chpwd precmd preexec periodic zshaddhistory zshexit zsh_directory_name) \n-\tlocal usage=\"Usage: add-zsh-hook hook function\\nValid hooks are:\\n  $hooktypes\" \n-\tlocal opt\n-\tlocal -a autoopts\n-\tinteger del list help\n-\twhile getopts \"dDhLUzk\" opt\n-\tdo\n-\t\tcase $opt in\n-\t\t\t(d) del=1  ;;\n-\t\t\t(D) del=2  ;;\n-\t\t\t(h) help=1  ;;\n-\t\t\t(L) list=1  ;;\n-\t\t\t([Uzk]) autoopts+=(-$opt)  ;;\n-\t\t\t(*) return 1 ;;\n-\t\tesac\n-\tdone\n-\tshift $(( OPTIND - 1 ))\n-\tif (( list ))\n-\tthen\n-\t\ttypeset -mp \"(${1:-${(@j:|:)hooktypes}})_functions\"\n-\t\treturn $?\n-\telif (( help || $# != 2 || ${hooktypes[(I)$1]} == 0 ))\n-\tthen\n-\t\tprint -u$(( 2 - help )) $usage\n-\t\treturn $(( 1 - help ))\n-\tfi\n-\tlocal hook=\"${1}_functions\" \n-\tlocal fn=\"$2\" \n-\tif (( del ))\n-\tthen\n-\t\tif (( ${(P)+hook} ))\n-\t\tthen\n-\t\t\tif (( del == 2 ))\n-\t\t\tthen\n-\t\t\t\tset -A $hook ${(P)hook:#${~fn}}\n-\t\t\telse\n-\t\t\t\tset -A $hook ${(P)hook:#$fn}\n-\t\t\tfi\n-\t\t\tif (( ! ${(P)#hook} ))\n-\t\t\tthen\n-\t\t\t\tunset $hook\n-\t\t\tfi\n-\t\tfi\n-\telse\n-\t\tif (( ${(P)+hook} ))\n-\t\tthen\n-\t\t\tif (( ${${(P)hook}[(I)$fn]} == 0 ))\n-\t\t\tthen\n-\t\t\t\ttypeset -ga $hook\n-\t\t\t\tset -A $hook ${(P)hook} $fn\n-\t\t\tfi\n-\t\telse\n-\t\t\ttypeset -ga $hook\n-\t\t\tset -A $hook $fn\n-\t\tfi\n-\t\tautoload $autoopts -- $fn\n-\tfi\n-}\n-alias_value () {\n-\t(( $+aliases[$1] )) && echo $aliases[$1]\n-}\n-azure_prompt_info () {\n-\treturn 1\n-}\n-bashcompinit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-bracketed-paste-magic () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-bzr_prompt_info () {\n-\tlocal bzr_branch\n-\tbzr_branch=$(bzr nick 2>/dev/null)  || return\n-\tif [[ -n \"$bzr_branch\" ]]\n-\tthen\n-\t\tlocal bzr_dirty=\"\" \n-\t\tif [[ -n $(bzr status 2>/dev/null) ]]\n-\t\tthen\n-\t\t\tbzr_dirty=\" %{$fg[red]%}*%{$reset_color%}\" \n-\t\tfi\n-\t\tprintf \"%s%s%s%s\" \"$ZSH_THEME_SCM_PROMPT_PREFIX\" \"bzr::${bzr_branch##*:}\" \"$bzr_dirty\" \"$ZSH_THEME_GIT_PROMPT_SUFFIX\"\n-\tfi\n-}\n-chruby_prompt_info () {\n-\treturn 1\n-}\n-clipcopy () {\n-\tunfunction clipcopy clippaste\n-\tdetect-clipboard || true\n-\t\"$0\" \"$@\"\n-}\n-clippaste () {\n-\tunfunction clipcopy clippaste\n-\tdetect-clipboard || true\n-\t\"$0\" \"$@\"\n-}\n-colors () {\n-\temulate -L zsh\n-\ttypeset -Ag color colour\n-\tcolor=(00 none 01 bold 02 faint 22 normal 03 standout 23 no-standout 04 underline 24 no-underline 05 blink 25 no-blink 07 reverse 27 no-reverse 08 conceal 28 no-conceal 30 black 40 bg-black 31 red 41 bg-red 32 green 42 bg-green 33 yellow 43 bg-yellow 34 blue 44 bg-blue 35 magenta 45 bg-magenta 36 cyan 46 bg-cyan 37 white 47 bg-white 39 default 49 bg-default) \n-\tlocal k\n-\tfor k in ${(k)color}\n-\tdo\n-\t\tcolor[${color[$k]}]=$k \n-\tdone\n-\tfor k in ${color[(I)3?]}\n-\tdo\n-\t\tcolor[fg-${color[$k]}]=$k \n-\tdone\n-\tcolor[grey]=${color[black]} \n-\tcolor[fg-grey]=${color[grey]} \n-\tcolor[bg-grey]=${color[bg-black]} \n-\tcolour=(${(kv)color}) \n-\tlocal lc=$'\\e[' rc=m \n-\ttypeset -Hg reset_color bold_color\n-\treset_color=\"$lc${color[none]}$rc\" \n-\tbold_color=\"$lc${color[bold]}$rc\" \n-\ttypeset -AHg fg fg_bold fg_no_bold\n-\tfor k in ${(k)color[(I)fg-*]}\n-\tdo\n-\t\tfg[${k#fg-}]=\"$lc${color[$k]}$rc\" \n-\t\tfg_bold[${k#fg-}]=\"$lc${color[bold]};${color[$k]}$rc\" \n-\t\tfg_no_bold[${k#fg-}]=\"$lc${color[normal]};${color[$k]}$rc\" \n-\tdone\n-\ttypeset -AHg bg bg_bold bg_no_bold\n-\tfor k in ${(k)color[(I)bg-*]}\n-\tdo\n-\t\tbg[${k#bg-}]=\"$lc${color[$k]}$rc\" \n-\t\tbg_bold[${k#bg-}]=\"$lc${color[bold]};${color[$k]}$rc\" \n-\t\tbg_no_bold[${k#bg-}]=\"$lc${color[normal]};${color[$k]}$rc\" \n-\tdone\n-}\n-compaudit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compdef () {\n-\tlocal opt autol type func delete eval new i ret=0 cmd svc \n-\tlocal -a match mbegin mend\n-\temulate -L zsh\n-\tsetopt extendedglob\n-\tif (( ! $# ))\n-\tthen\n-\t\tprint -u2 \"$0: I need arguments\"\n-\t\treturn 1\n-\tfi\n-\twhile getopts \"anpPkKde\" opt\n-\tdo\n-\t\tcase \"$opt\" in\n-\t\t\t(a) autol=yes  ;;\n-\t\t\t(n) new=yes  ;;\n-\t\t\t([pPkK]) if [[ -n \"$type\" ]]\n-\t\t\t\tthen\n-\t\t\t\t\tprint -u2 \"$0: type already set to $type\"\n-\t\t\t\t\treturn 1\n-\t\t\t\tfi\n-\t\t\t\tif [[ \"$opt\" = p ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=pattern \n-\t\t\t\telif [[ \"$opt\" = P ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=postpattern \n-\t\t\t\telif [[ \"$opt\" = K ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=widgetkey \n-\t\t\t\telse\n-\t\t\t\t\ttype=key \n-\t\t\t\tfi ;;\n-\t\t\t(d) delete=yes  ;;\n-\t\t\t(e) eval=yes  ;;\n-\t\tesac\n-\tdone\n-\tshift OPTIND-1\n-\tif (( ! $# ))\n-\tthen\n-\t\tprint -u2 \"$0: I need arguments\"\n-\t\treturn 1\n-\tfi\n-\tif [[ -z \"$delete\" ]]\n-\tthen\n-\t\tif [[ -z \"$eval\" ]] && [[ \"$1\" = *\\=* ]]\n-\t\tthen\n-\t\t\twhile (( $# ))\n-\t\t\tdo\n-\t\t\t\tif [[ \"$1\" = *\\=* ]]\n-\t\t\t\tthen\n-\t\t\t\t\tcmd=\"${1%%\\=*}\" \n-\t\t\t\t\tsvc=\"${1#*\\=}\" \n-\t\t\t\t\tfunc=\"$_comps[${_services[(r)$svc]:-$svc}]\" \n-\t\t\t\t\t[[ -n ${_services[$svc]} ]] && svc=${_services[$svc]} \n-\t\t\t\t\t[[ -z \"$func\" ]] && func=\"${${_patcomps[(K)$svc][1]}:-${_postpatcomps[(K)$svc][1]}}\" \n-\t\t\t\t\tif [[ -n \"$func\" ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\t_comps[$cmd]=\"$func\" \n-\t\t\t\t\t\t_services[$cmd]=\"$svc\" \n-\t\t\t\t\telse\n-\t\t\t\t\t\tprint -u2 \"$0: unknown command or service: $svc\"\n-\t\t\t\t\t\tret=1 \n-\t\t\t\t\tfi\n-\t\t\t\telse\n-\t\t\t\t\tprint -u2 \"$0: invalid argument: $1\"\n-\t\t\t\t\tret=1 \n-\t\t\t\tfi\n-\t\t\t\tshift\n-\t\t\tdone\n-\t\t\treturn ret\n-\t\tfi\n-\t\tfunc=\"$1\" \n-\t\t[[ -n \"$autol\" ]] && autoload -Uz \"$func\"\n-\t\tshift\n-\t\tcase \"$type\" in\n-\t\t\t(widgetkey) while [[ -n $1 ]]\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ $# -lt 3 ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tprint -u2 \"$0: compdef -K requires <widget> <comp-widget> <key>\"\n-\t\t\t\t\t\treturn 1\n-\t\t\t\t\tfi\n-\t\t\t\t\t[[ $1 = _* ]] || 1=\"_$1\" \n-\t\t\t\t\t[[ $2 = .* ]] || 2=\".$2\" \n-\t\t\t\t\t[[ $2 = .menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$1\" \"$2\" \"$func\"\n-\t\t\t\t\tif [[ -n $new ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tbindkey \"$3\" | IFS=$' \\t' read -A opt\n-\t\t\t\t\t\t[[ $opt[-1] = undefined-key ]] && bindkey \"$3\" \"$1\"\n-\t\t\t\t\telse\n-\t\t\t\t\t\tbindkey \"$3\" \"$1\"\n-\t\t\t\t\tfi\n-\t\t\t\t\tshift 3\n-\t\t\t\tdone ;;\n-\t\t\t(key) if [[ $# -lt 2 ]]\n-\t\t\t\tthen\n-\t\t\t\t\tprint -u2 \"$0: missing keys\"\n-\t\t\t\t\treturn 1\n-\t\t\t\tfi\n-\t\t\t\tif [[ $1 = .* ]]\n-\t\t\t\tthen\n-\t\t\t\t\t[[ $1 = .menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$func\" \"$1\" \"$func\"\n-\t\t\t\telse\n-\t\t\t\t\t[[ $1 = menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$func\" \".$1\" \"$func\"\n-\t\t\t\tfi\n-\t\t\t\tshift\n-\t\t\t\tfor i\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ -n $new ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tbindkey \"$i\" | IFS=$' \\t' read -A opt\n-\t\t\t\t\t\t[[ $opt[-1] = undefined-key ]] || continue\n-\t\t\t\t\tfi\n-\t\t\t\t\tbindkey \"$i\" \"$func\"\n-\t\t\t\tdone ;;\n-\t\t\t(*) while (( $# ))\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ \"$1\" = -N ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=normal \n-\t\t\t\t\telif [[ \"$1\" = -p ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=pattern \n-\t\t\t\t\telif [[ \"$1\" = -P ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=postpattern \n-\t\t\t\t\telse\n-\t\t\t\t\t\tcase \"$type\" in\n-\t\t\t\t\t\t\t(pattern) if [[ $1 = (#b)(*)=(*) ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_patcomps[$match[1]]=\"=$match[2]=$func\" \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\t_patcomps[$1]=\"$func\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\t\t(postpattern) if [[ $1 = (#b)(*)=(*) ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_postpatcomps[$match[1]]=\"=$match[2]=$func\" \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\t_postpatcomps[$1]=\"$func\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\t\t(*) if [[ \"$1\" = *\\=* ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\tcmd=\"${1%%\\=*}\" \n-\t\t\t\t\t\t\t\t\tsvc=yes \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\tcmd=\"$1\" \n-\t\t\t\t\t\t\t\t\tsvc= \n-\t\t\t\t\t\t\t\tfi\n-\t\t\t\t\t\t\t\tif [[ -z \"$new\" || -z \"${_comps[$1]}\" ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_comps[$cmd]=\"$func\" \n-\t\t\t\t\t\t\t\t\t[[ -n \"$svc\" ]] && _services[$cmd]=\"${1#*\\=}\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\tesac\n-\t\t\t\t\tfi\n-\t\t\t\t\tshift\n-\t\t\t\tdone ;;\n-\t\tesac\n-\telse\n-\t\tcase \"$type\" in\n-\t\t\t(pattern) unset \"_patcomps[$^@]\" ;;\n-\t\t\t(postpattern) unset \"_postpatcomps[$^@]\" ;;\n-\t\t\t(key) print -u2 \"$0: cannot restore key bindings\"\n-\t\t\t\treturn 1 ;;\n-\t\t\t(*) unset \"_comps[$^@]\" ;;\n-\t\tesac\n-\tfi\n-}\n-compdump () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compgen () {\n-\tlocal opts prefix suffix job OPTARG OPTIND ret=1 \n-\tlocal -a name res results jids\n-\tlocal -A shortopts\n-\temulate -L sh\n-\tsetopt kshglob noshglob braceexpand nokshautoload\n-\tshortopts=(a alias b builtin c command d directory e export f file g group j job k keyword u user v variable) \n-\twhile getopts \"o:A:G:C:F:P:S:W:X:abcdefgjkuv\" name\n-\tdo\n-\t\tcase $name in\n-\t\t\t([abcdefgjkuv]) OPTARG=\"${shortopts[$name]}\"  ;&\n-\t\t\t(A) case $OPTARG in\n-\t\t\t\t\t(alias) results+=(\"${(k)aliases[@]}\")  ;;\n-\t\t\t\t\t(arrayvar) results+=(\"${(k@)parameters[(R)array*]}\")  ;;\n-\t\t\t\t\t(binding) results+=(\"${(k)widgets[@]}\")  ;;\n-\t\t\t\t\t(builtin) results+=(\"${(k)builtins[@]}\" \"${(k)dis_builtins[@]}\")  ;;\n-\t\t\t\t\t(command) results+=(\"${(k)commands[@]}\" \"${(k)aliases[@]}\" \"${(k)builtins[@]}\" \"${(k)functions[@]}\" \"${(k)reswords[@]}\")  ;;\n-\t\t\t\t\t(directory) setopt bareglobqual\n-\t\t\t\t\t\tresults+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N-/)) \n-\t\t\t\t\t\tsetopt nobareglobqual ;;\n-\t\t\t\t\t(disabled) results+=(\"${(k)dis_builtins[@]}\")  ;;\n-\t\t\t\t\t(enabled) results+=(\"${(k)builtins[@]}\")  ;;\n-\t\t\t\t\t(export) results+=(\"${(k)parameters[(R)*export*]}\")  ;;\n-\t\t\t\t\t(file) setopt bareglobqual\n-\t\t\t\t\t\tresults+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N)) \n-\t\t\t\t\t\tsetopt nobareglobqual ;;\n-\t\t\t\t\t(function) results+=(\"${(k)functions[@]}\")  ;;\n-\t\t\t\t\t(group) emulate zsh\n-\t\t\t\t\t\t_groups -U -O res\n-\t\t\t\t\t\temulate sh\n-\t\t\t\t\t\tsetopt kshglob noshglob braceexpand\n-\t\t\t\t\t\tresults+=(\"${res[@]}\")  ;;\n-\t\t\t\t\t(hostname) emulate zsh\n-\t\t\t\t\t\t_hosts -U -O res\n-\t\t\t\t\t\temulate sh\n-\t\t\t\t\t\tsetopt kshglob noshglob braceexpand\n-\t\t\t\t\t\tresults+=(\"${res[@]}\")  ;;\n-\t\t\t\t\t(job) results+=(\"${savejobtexts[@]%% *}\")  ;;\n-\t\t\t\t\t(keyword) results+=(\"${(k)reswords[@]}\")  ;;\n-\t\t\t\t\t(running) jids=(\"${(@k)savejobstates[(R)running*]}\") \n-\t\t\t\t\t\tfor job in \"${jids[@]}\"\n-\t\t\t\t\t\tdo\n-\t\t\t\t\t\t\tresults+=(${savejobtexts[$job]%% *}) \n-\t\t\t\t\t\tdone ;;\n-\t\t\t\t\t(stopped) jids=(\"${(@k)savejobstates[(R)suspended*]}\") \n-\t\t\t\t\t\tfor job in \"${jids[@]}\"\n-\t\t\t\t\t\tdo\n-\t\t\t\t\t\t\tresults+=(${savejobtexts[$job]%% *}) \n-\t\t\t\t\t\tdone ;;\n-\t\t\t\t\t(setopt | shopt) results+=(\"${(k)options[@]}\")  ;;\n-\t\t\t\t\t(signal) results+=(\"SIG${^signals[@]}\")  ;;\n-\t\t\t\t\t(user) results+=(\"${(k)userdirs[@]}\")  ;;\n-\t\t\t\t\t(variable) results+=(\"${(k)parameters[@]}\")  ;;\n-\t\t\t\t\t(helptopic)  ;;\n-\t\t\t\tesac ;;\n-\t\t\t(F) COMPREPLY=() \n-\t\t\t\tlocal -a args\n-\t\t\t\targs=(\"${words[0]}\" \"${@[-1]}\" \"${words[CURRENT-2]}\") \n-\t\t\t\t() {\n-\t\t\t\t\ttypeset -h words\n-\t\t\t\t\t$OPTARG \"${args[@]}\"\n-\t\t\t\t}\n-\t\t\t\tresults+=(\"${COMPREPLY[@]}\")  ;;\n-\t\t\t(G) setopt nullglob\n-\t\t\t\tresults+=(${~OPTARG}) \n-\t\t\t\tunsetopt nullglob ;;\n-\t\t\t(W) results+=(${(Q)~=OPTARG})  ;;\n-\t\t\t(C) results+=($(eval $OPTARG))  ;;\n-\t\t\t(P) prefix=\"$OPTARG\"  ;;\n-\t\t\t(S) suffix=\"$OPTARG\"  ;;\n-\t\t\t(X) if [[ ${OPTARG[0]} = '!' ]]\n-\t\t\t\tthen\n-\t\t\t\t\tresults=(\"${(M)results[@]:#${OPTARG#?}}\") \n-\t\t\t\telse\n-\t\t\t\t\tresults=(\"${results[@]:#$OPTARG}\") \n-\t\t\t\tfi ;;\n-\t\tesac\n-\tdone\n-\tprint -l -r -- \"$prefix${^results[@]}$suffix\"\n-}\n-compinit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compinstall () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-complete () {\n-\temulate -L zsh\n-\tlocal args void cmd print remove\n-\targs=(\"$@\") \n-\tzparseopts -D -a void o: A: G: W: C: F: P: S: X: a b c d e f g j k u v p=print r=remove\n-\tif [[ -n $print ]]\n-\tthen\n-\t\tprintf 'complete %2$s %1$s\\n' \"${(@kv)_comps[(R)_bash*]#* }\"\n-\telif [[ -n $remove ]]\n-\tthen\n-\t\tfor cmd\n-\t\tdo\n-\t\t\tunset \"_comps[$cmd]\"\n-\t\tdone\n-\telse\n-\t\tcompdef _bash_complete\\ ${(j. .)${(q)args[1,-1-$#]}} \"$@\"\n-\tfi\n-}\n-conda () {\n-\t\\local cmd=\"${1-__missing__}\"\n-\tcase \"$cmd\" in\n-\t\t(activate | deactivate) __conda_activate \"$@\" ;;\n-\t\t(install | update | upgrade | remove | uninstall) __conda_exe \"$@\" || \\return\n-\t\t\t__conda_reactivate ;;\n-\t\t(*) __conda_exe \"$@\" ;;\n-\tesac\n-}\n-conda_prompt_info () {\n-\treturn 1\n-}\n-current_branch () {\n-\tgit_current_branch\n-}\n-d () {\n-\tif [[ -n $1 ]]\n-\tthen\n-\t\tdirs \"$@\"\n-\telse\n-\t\tdirs -v | head -n 10\n-\tfi\n-}\n-default () {\n-\t(( $+parameters[$1] )) && return 0\n-\ttypeset -g \"$1\"=\"$2\" && return 3\n-}\n-detect-clipboard () {\n-\temulate -L zsh\n-\tif [[ \"${OSTYPE}\" == darwin* ]] && (( ${+commands[pbcopy]} )) && (( ${+commands[pbpaste]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | pbcopy\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tpbpaste\n-\t\t}\n-\telif [[ \"${OSTYPE}\" == (cygwin|msys)* ]]\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" > /dev/clipboard\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tcat /dev/clipboard\n-\t\t}\n-\telif (( $+commands[clip.exe] )) && (( $+commands[powershell.exe] ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | clip.exe\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tpowershell.exe -noprofile -command Get-Clipboard\n-\t\t}\n-\telif [ -n \"${WAYLAND_DISPLAY:-}\" ] && (( ${+commands[wl-copy]} )) && (( ${+commands[wl-paste]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | wl-copy &> /dev/null &|\n-\t\t}\n-\t\tclippaste () {\n-\t\t\twl-paste --no-newline\n-\t\t}\n-\telif [ -n \"${DISPLAY:-}\" ] && (( ${+commands[xsel]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | xsel --clipboard --input\n-\t\t}\n-\t\tclippaste () {\n-\t\t\txsel --clipboard --output\n-\t\t}\n-\telif [ -n \"${DISPLAY:-}\" ] && (( ${+commands[xclip]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | xclip -selection clipboard -in &> /dev/null &|\n-\t\t}\n-\t\tclippaste () {\n-\t\t\txclip -out -selection clipboard\n-\t\t}\n-\telif (( ${+commands[lemonade]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | lemonade copy\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tlemonade paste\n-\t\t}\n-\telif (( ${+commands[doitclient]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | doitclient wclip\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tdoitclient wclip -r\n-\t\t}\n-\telif (( ${+commands[win32yank]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | win32yank -i\n-\t\t}\n-\t\tclippaste () {\n-\t\t\twin32yank -o\n-\t\t}\n-\telif [[ $OSTYPE == linux-android* ]] && (( $+commands[termux-clipboard-set] ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | termux-clipboard-set\n-\t\t}\n-\t\tclippaste () {\n-\t\t\ttermux-clipboard-get\n-\t\t}\n-\telif [ -n \"${TMUX:-}\" ] && (( ${+commands[tmux]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\ttmux load-buffer \"${1:--}\"\n-\t\t}\n-\t\tclippaste () {\n-\t\t\ttmux save-buffer -\n-\t\t}\n-\telse\n-\t\t_retry_clipboard_detection_or_fail () {\n-\t\t\tlocal clipcmd=\"${1}\" \n-\t\t\tshift\n-\t\t\tif detect-clipboard\n-\t\t\tthen\n-\t\t\t\t\"${clipcmd}\" \"$@\"\n-\t\t\telse\n-\t\t\t\tprint \"${clipcmd}: Platform $OSTYPE not supported or xclip/xsel not installed\" >&2\n-\t\t\t\treturn 1\n-\t\t\tfi\n-\t\t}\n-\t\tclipcopy () {\n-\t\t\t_retry_clipboard_detection_or_fail clipcopy \"$@\"\n-\t\t}\n-\t\tclippaste () {\n-\t\t\t_retry_clipboard_detection_or_fail clippaste \"$@\"\n-\t\t}\n-\t\treturn 1\n-\tfi\n-}\n-diff () {\n-\tcommand diff --color \"$@\"\n-}\n-down-line-or-beginning-search () {\n-\t# undefined\n-\tbuiltin autoload -XU\n-}\n-edit-command-line () {\n-\t# undefined\n-\tbuiltin autoload -XU\n-}\n-env_default () {\n-\t[[ ${parameters[$1]} = *-export* ]] && return 0\n-\texport \"$1=$2\" && return 3\n-}\n-gbda () {\n-\tgit branch --no-color --merged | command grep -vE \"^([+*]|\\s*($(git_main_branch)|$(git_develop_branch))\\s*$)\" | command xargs git branch --delete 2> /dev/null\n-}\n-gbds () {\n-\tlocal default_branch=$(git_main_branch) \n-\t(( ! $? )) || default_branch=$(git_develop_branch) \n-\tgit for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch\n-\tdo\n-\t\tlocal merge_base=$(git merge-base $default_branch $branch) \n-\t\tif [[ $(git cherry $default_branch $(git commit-tree $(git rev-parse $branch\\^{tree}) -p $merge_base -m _)) = -* ]]\n-\t\tthen\n-\t\t\tgit branch -D $branch\n-\t\tfi\n-\tdone\n-}\n-gccd () {\n-\tsetopt localoptions extendedglob\n-\tlocal repo=\"${${@[(r)(ssh://*|git://*|ftp(s)#://*|http(s)#://*|*@*)(.git/#)#]}:-$_}\" \n-\tcommand git clone --recurse-submodules \"$@\" || return\n-\t[[ -d \"$_\" ]] && cd \"$_\" || cd \"${${repo:t}%.git/#}\"\n-}\n-gdnolock () {\n-\tgit diff \"$@\" \":(exclude)package-lock.json\" \":(exclude)*.lock\"\n-}\n-gdv () {\n-\tgit diff -w \"$@\" | view -\n-}\n-getColorCode () {\n-\teval \"$__p9k_intro\"\n-\tif (( ARGC == 1 ))\n-\tthen\n-\t\tcase $1 in\n-\t\t\t(foreground) local k\n-\t\t\t\tfor k in \"${(k@)__p9k_colors}\"\n-\t\t\t\tdo\n-\t\t\t\t\tlocal v=${__p9k_colors[$k]} \n-\t\t\t\t\tprint -rP -- \"%F{$v}$v - $k%f\"\n-\t\t\t\tdone\n-\t\t\t\treturn 0 ;;\n-\t\t\t(background) local k\n-\t\t\t\tfor k in \"${(k@)__p9k_colors}\"\n-\t\t\t\tdo\n-\t\t\t\t\tlocal v=${__p9k_colors[$k]} \n-\t\t\t\t\tprint -rP -- \"%K{$v}$v - $k%k\"\n-\t\t\t\tdone\n-\t\t\t\treturn 0 ;;\n-\t\tesac\n-\tfi\n-\techo \"Usage: getColorCode background|foreground\" >&2\n-\treturn 1\n-}\n-get_icon_names () {\n-\teval \"$__p9k_intro\"\n-\t_p9k_init_icons\n-\tlocal key\n-\tfor key in ${(@kon)icons}\n-\tdo\n-\t\techo -n - \"POWERLEVEL9K_$key: \"\n-\t\tprint -nP \"%K{red} %k\"\n-\t\tif [[ $1 == original ]]\n-\t\tthen\n-\t\t\techo -n - $icons[$key]\n-\t\telse\n-\t\t\tprint_icon $key\n-\t\tfi\n-\t\tprint -P \"%K{red} %k\"\n-\tdone\n-}\n-ggf () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit push --force origin \"${b:=$1}\"\n-}\n-ggfl () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit push --force-with-lease origin \"${b:=$1}\"\n-}\n-ggl () {\n-\tif [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]\n-\tthen\n-\t\tgit pull origin \"${*}\"\n-\telse\n-\t\t[[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\" \n-\t\tgit pull origin \"${b:=$1}\"\n-\tfi\n-}\n-ggp () {\n-\tif [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]\n-\tthen\n-\t\tgit push origin \"${*}\"\n-\telse\n-\t\t[[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\" \n-\t\tgit push origin \"${b:=$1}\"\n-\tfi\n-}\n-ggpnp () {\n-\tif [[ \"$#\" == 0 ]]\n-\tthen\n-\t\tggl && ggp\n-\telse\n-\t\tggl \"${*}\" && ggp \"${*}\"\n-\tfi\n-}\n-ggu () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit pull --rebase origin \"${b:=$1}\"\n-}\n-git_commits_ahead () {\n-\tif __git_prompt_git rev-parse --git-dir &> /dev/null\n-\tthen\n-\t\tlocal commits=\"$(__git_prompt_git rev-list --count @{upstream}..HEAD 2>/dev/null)\" \n-\t\tif [[ -n \"$commits\" && \"$commits\" != 0 ]]\n-\t\tthen\n-\t\t\techo \"$ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX$commits$ZSH_THEME_GIT_COMMITS_AHEAD_SUFFIX\"\n-\t\tfi\n-\tfi\n-}\n-git_commits_behind () {\n-\tif __git_prompt_git rev-parse --git-dir &> /dev/null\n-\tthen\n-\t\tlocal commits=\"$(__git_prompt_git rev-list --count HEAD..@{upstream} 2>/dev/null)\" \n-\t\tif [[ -n \"$commits\" && \"$commits\" != 0 ]]\n-\t\tthen\n-\t\t\techo \"$ZSH_THEME_GIT_COMMITS_BEHIND_PREFIX$commits$ZSH_THEME_GIT_COMMITS_BEHIND_SUFFIX\"\n-\t\tfi\n-\tfi\n-}\n-git_current_branch () {\n-\tlocal ref\n-\tref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null) \n-\tlocal ret=$? \n-\tif [[ $ret != 0 ]]\n-\tthen\n-\t\t[[ $ret == 128 ]] && return\n-\t\tref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  || return\n-\tfi\n-\techo ${ref#refs/heads/}\n-}\n-git_current_user_email () {\n-\t__git_prompt_git config user.email 2> /dev/null\n-}\n-git_current_user_name () {\n-\t__git_prompt_git config user.name 2> /dev/null\n-}\n-git_develop_branch () {\n-\tcommand git rev-parse --git-dir &> /dev/null || return\n-\tlocal branch\n-\tfor branch in dev devel develop development\n-\tdo\n-\t\tif command git show-ref -q --verify refs/heads/$branch\n-\t\tthen\n-\t\t\techo $branch\n-\t\t\treturn 0\n-\t\tfi\n-\tdone\n-\techo develop\n-\treturn 1\n-}\n-git_main_branch () {\n-\tcommand git rev-parse --git-dir &> /dev/null || return\n-\tlocal ref\n-\tfor ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default,stable,master}\n-\tdo\n-\t\tif command git show-ref -q --verify $ref\n-\t\tthen\n-\t\t\techo ${ref:t}\n-\t\t\treturn 0\n-\t\tfi\n-\tdone\n-\techo master\n-\treturn 1\n-}\n-git_previous_branch () {\n-\tlocal ref\n-\tref=$(__git_prompt_git rev-parse --quiet --symbolic-full-name @{-1} 2> /dev/null) \n-\tlocal ret=$? \n-\tif [[ $ret != 0 ]] || [[ -z $ref ]]\n-\tthen\n-\t\treturn\n-\tfi\n-\techo ${ref#refs/heads/}\n-}\n-git_prompt_ahead () {\n-\tif [[ -n \"$(__git_prompt_git rev-list origin/$(git_current_branch)..HEAD 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_AHEAD\"\n-\tfi\n-}\n-git_prompt_behind () {\n-\tif [[ -n \"$(__git_prompt_git rev-list HEAD..origin/$(git_current_branch) 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_BEHIND\"\n-\tfi\n-}\n-git_prompt_info () {\n-\tif [[ -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_info]}\" ]]\n-\tthen\n-\t\techo -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_info]}\"\n-\tfi\n-}\n-git_prompt_long_sha () {\n-\tlocal SHA\n-\tSHA=$(__git_prompt_git rev-parse HEAD 2> /dev/null)  && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n-}\n-git_prompt_remote () {\n-\tif [[ -n \"$(__git_prompt_git show-ref origin/$(git_current_branch) 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_REMOTE_EXISTS\"\n-\telse\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_REMOTE_MISSING\"\n-\tfi\n-}\n-git_prompt_short_sha () {\n-\tlocal SHA\n-\tSHA=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n-}\n-git_prompt_status () {\n-\tif [[ -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_status]}\" ]]\n-\tthen\n-\t\techo -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_status]}\"\n-\tfi\n-}\n-git_remote_status () {\n-\tlocal remote ahead behind git_remote_status git_remote_status_detailed\n-\tremote=${$(__git_prompt_git rev-parse --verify ${hook_com[branch]}@{upstream} --symbolic-full-name 2>/dev/null)/refs\\/remotes\\/} \n-\tif [[ -n ${remote} ]]\n-\tthen\n-\t\tahead=$(__git_prompt_git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l) \n-\t\tbehind=$(__git_prompt_git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l) \n-\t\tif [[ $ahead -eq 0 ]] && [[ $behind -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_EQUAL_REMOTE\" \n-\t\telif [[ $ahead -gt 0 ]] && [[ $behind -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}\" \n-\t\telif [[ $behind -gt 0 ]] && [[ $ahead -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}\" \n-\t\telif [[ $ahead -gt 0 ]] && [[ $behind -gt 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}\" \n-\t\tfi\n-\t\tif [[ -n $ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_DETAILED ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_PREFIX${remote:gs/%/%%}$git_remote_status_detailed$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_SUFFIX\" \n-\t\tfi\n-\t\techo $git_remote_status\n-\tfi\n-}\n-git_repo_name () {\n-\tlocal repo_path\n-\tif repo_path=\"$(__git_prompt_git rev-parse --show-toplevel 2>/dev/null)\"  && [[ -n \"$repo_path\" ]]\n-\tthen\n-\t\techo ${repo_path:t}\n-\tfi\n-}\n-grename () {\n-\tif [[ -z \"$1\" || -z \"$2\" ]]\n-\tthen\n-\t\techo \"Usage: $0 old_branch new_branch\"\n-\t\treturn 1\n-\tfi\n-\tgit branch -m \"$1\" \"$2\"\n-\tif git push origin :\"$1\"\n-\tthen\n-\t\tgit push --set-upstream origin \"$2\"\n-\tfi\n-}\n-gunwipall () {\n-\tlocal _commit=$(git log --grep='--wip--' --invert-grep --max-count=1 --format=format:%H) \n-\tif [[ \"$_commit\" != \"$(git rev-parse HEAD)\" ]]\n-\tthen\n-\t\tgit reset $_commit || return 1\n-\tfi\n-}\n-handle_completion_insecurities () {\n-\tlocal -aU insecure_dirs\n-\tinsecure_dirs=(${(f@):-\"$(compaudit 2>/dev/null)\"}) \n-\t[[ -z \"${insecure_dirs}\" ]] && return\n-\tprint \"[oh-my-zsh] Insecure completion-dependent directories detected:\"\n-\tls -ld \"${(@)insecure_dirs}\"\n-\tcat <<EOD\n-\n-[oh-my-zsh] For safety, we will not load completions from these directories until\n-[oh-my-zsh] you fix their permissions and ownership and restart zsh.\n-[oh-my-zsh] See the above list for directories with group or other writability.\n-\n-[oh-my-zsh] To fix your permissions you can do so by disabling\n-[oh-my-zsh] the write permission of \"group\" and \"others\" and making sure that the\n-[oh-my-zsh] owner of these directories is either root or your current user.\n-[oh-my-zsh] The following command may help:\n-[oh-my-zsh]     compaudit | xargs chmod g-w,o-w\n-\n-[oh-my-zsh] If the above didn't help or you want to skip the verification of\n-[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to\n-[oh-my-zsh] \"true\" before oh-my-zsh is sourced in your zshrc file.\n-\n-EOD\n-}\n-hg_prompt_info () {\n-\treturn 1\n-}\n-instant_prompt__p9k_internal_nothing () {\n-\tprompt__p9k_internal_nothing\n-}\n-instant_prompt_context () {\n-\tif [[ $_POWERLEVEL9K_ALWAYS_SHOW_CONTEXT == 0 && -n $DEFAULT_USER && $P9K_SSH == 0 ]]\n-\tthen\n-\t\tif [[ ${(%):-%n} == $DEFAULT_USER ]]\n-\t\tthen\n-\t\t\tif (( ! _POWERLEVEL9K_ALWAYS_SHOW_USER ))\n-\t\t\tthen\n-\t\t\t\treturn\n-\t\t\tfi\n-\t\tfi\n-\tfi\n-\tprompt_context\n-}\n-instant_prompt_date () {\n-\t_p9k_escape $_POWERLEVEL9K_DATE_FORMAT\n-\tlocal stash='${${__p9k_instant_prompt_date::=${(%)${__p9k_instant_prompt_date_format::='$_p9k__ret'}}}+}' \n-\t_p9k_escape $_POWERLEVEL9K_DATE_FORMAT\n-\t_p9k_prompt_segment prompt_date \"$_p9k_color2\" \"$_p9k_color1\" \"DATE_ICON\" 1 '' $stash$_p9k__ret\n-}\n-instant_prompt_dir () {\n-\tprompt_dir\n-}\n-instant_prompt_dir_writable () {\n-\tprompt_dir_writable\n-}\n-instant_prompt_direnv () {\n-\tif [[ -n $DIRENV_DIR && $precmd_functions[-1] == _p9k_precmd ]]\n-\tthen\n-\t\t_p9k_prompt_segment prompt_direnv $_p9k_color1 yellow DIRENV_ICON 0 '' ''\n-\tfi\n-}\n-instant_prompt_example () {\n-\tprompt_example\n-}\n-instant_prompt_host () {\n-\tprompt_host\n-}\n-instant_prompt_midnight_commander () {\n-\t_p9k_prompt_segment prompt_midnight_commander $_p9k_color1 yellow MIDNIGHT_COMMANDER_ICON 0 '$MC_TMPDIR' ''\n-}\n-instant_prompt_nix_shell () {\n-\t_p9k_prompt_segment prompt_nix_shell 4 $_p9k_color1 NIX_SHELL_ICON 1 '${IN_NIX_SHELL:#0}' '${(M)IN_NIX_SHELL:#(pure|impure)}'\n-}\n-instant_prompt_nnn () {\n-\t_p9k_prompt_segment prompt_nnn 6 $_p9k_color1 NNN_ICON 1 '${NNNLVL:#0}' '$NNNLVL'\n-}\n-instant_prompt_os_icon () {\n-\tprompt_os_icon\n-}\n-instant_prompt_prompt_char () {\n-\t_p9k_prompt_segment prompt_prompt_char_OK_VIINS \"$_p9k_color1\" 76 '' 0 '' '❯'\n-}\n-instant_prompt_ranger () {\n-\t_p9k_prompt_segment prompt_ranger $_p9k_color1 yellow RANGER_ICON 1 '$RANGER_LEVEL' '$RANGER_LEVEL'\n-}\n-instant_prompt_root_indicator () {\n-\tprompt_root_indicator\n-}\n-instant_prompt_ssh () {\n-\tif (( ! P9K_SSH ))\n-\tthen\n-\t\treturn\n-\tfi\n-\tprompt_ssh\n-}\n-instant_prompt_status () {\n-\tif (( _POWERLEVEL9K_STATUS_OK ))\n-\tthen\n-\t\t_p9k_prompt_segment prompt_status_OK \"$_p9k_color1\" green OK_ICON 0 '' ''\n-\tfi\n-}\n-instant_prompt_time () {\n-\t_p9k_escape $_POWERLEVEL9K_TIME_FORMAT\n-\tlocal stash='${${__p9k_instant_prompt_time::=${(%)${__p9k_instant_prompt_time_format::='$_p9k__ret'}}}+}' \n-\t_p9k_escape $_POWERLEVEL9K_TIME_FORMAT\n-\t_p9k_prompt_segment prompt_time \"$_p9k_color2\" \"$_p9k_color1\" \"TIME_ICON\" 1 '' $stash$_p9k__ret\n-}\n-instant_prompt_user () {\n-\tif [[ $_POWERLEVEL9K_ALWAYS_SHOW_USER == 0 && \"${(%):-%n}\" == $DEFAULT_USER ]]\n-\tthen\n-\t\treturn\n-\tfi\n-\tprompt_user\n-}\n-instant_prompt_vi_mode () {\n-\tif [[ -n $_POWERLEVEL9K_VI_INSERT_MODE_STRING ]]\n-\tthen\n-\t\t_p9k_prompt_segment prompt_vi_mode_INSERT \"$_p9k_color1\" blue '' 0 '' \"$_POWERLEVEL9K_VI_INSERT_MODE_STRING\"\n-\tfi\n-}\n-instant_prompt_vim_shell () {\n-\t_p9k_prompt_segment prompt_vim_shell green $_p9k_color1 VIM_ICON 0 '$VIMRUNTIME' ''\n-}\n-instant_prompt_xplr () {\n-\t_p9k_prompt_segment prompt_xplr 6 $_p9k_color1 XPLR_ICON 0 '$XPLR_PID' ''\n-}\n-is-at-least () {\n-\temulate -L zsh\n-\tlocal IFS=\".-\" min_cnt=0 ver_cnt=0 part min_ver version order \n-\tmin_ver=(${=1}) \n-\tversion=(${=2:-$ZSH_VERSION} 0) \n-\twhile (( $min_cnt <= ${#min_ver} ))\n-\tdo\n-\t\twhile [[ \"$part\" != <-> ]]\n-\t\tdo\n-\t\t\t(( ++ver_cnt > ${#version} )) && return 0\n-\t\t\tif [[ ${version[ver_cnt]} = *[0-9][^0-9]* ]]\n-\t\t\tthen\n-\t\t\t\torder=(${version[ver_cnt]} ${min_ver[ver_cnt]}) \n-\t\t\t\tif [[ ${version[ver_cnt]} = <->* ]]\n-\t\t\t\tthen\n-\t\t\t\t\t[[ $order != ${${(On)order}} ]] && return 1\n-\t\t\t\telse\n-\t\t\t\t\t[[ $order != ${${(O)order}} ]] && return 1\n-\t\t\t\tfi\n-\t\t\t\t[[ $order[1] != $order[2] ]] && return 0\n-\t\t\tfi\n-\t\t\tpart=$\n\n... [7206 lines truncated] ...","is_error":false}]},"uuid":"ea577f90-a867-4113-a0ef-b4f2f672e93e","timestamp":"2025-07-19T11:10:14.021Z","toolUseResult":{"stdout":"diff --git a/CLAUDE.md b/CLAUDE.md\nindex 924556d..1b54704 100644\n--- a/CLAUDE.md\n+++ b/CLAUDE.md\n@@ -25,6 +25,10 @@\n - Use merge strategy for pulls: `git pull --no-rebase`\n - For unrelated histories: `git pull --no-rebase --allow-unrelated-histories`\n \n+### Cross-Location Workflow\n+- Pull before starting work: `git pull`\n+- Commit and push at milestones: `git add . && git commit -m \"milestone message\" && git push`\n+\n - update docs before commit\n \n ## Database Considerations\ndiff --git a/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh b/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\ndeleted file mode 100644\nindex 03cf33e..0000000\n--- a/shell-snapshots/snapshot-zsh-1752920678750-d2pmsy.sh\n+++ /dev/null\n@@ -1,8268 +0,0 @@\n-# Snapshot file\n-# Unset all aliases to avoid conflicts with functions\n-unalias -a 2>/dev/null || true\n-# Functions\n-VCS_INFO_formats () {\n-\tsetopt localoptions noksharrays NO_shwordsplit\n-\tlocal msg tmp\n-\tlocal -i i\n-\tlocal -A hook_com\n-\thook_com=(action \"$1\" action_orig \"$1\" branch \"$2\" branch_orig \"$2\" base \"$3\" base_orig \"$3\" staged \"$4\" staged_orig \"$4\" unstaged \"$5\" unstaged_orig \"$5\" revision \"$6\" revision_orig \"$6\" misc \"$7\" misc_orig \"$7\" vcs \"${vcs}\" vcs_orig \"${vcs}\") \n-\thook_com[base-name]=\"${${hook_com[base]}:t}\" \n-\thook_com[base-name_orig]=\"${hook_com[base_name]}\" \n-\thook_com[subdir]=\"$(VCS_INFO_reposub ${hook_com[base]})\" \n-\thook_com[subdir_orig]=\"${hook_com[subdir]}\" \n-\t: vcs_info-patch-9b9840f2-91e5-4471-af84-9e9a0dc68c1b\n-\tfor tmp in base base-name branch misc revision subdir\n-\tdo\n-\t\thook_com[$tmp]=\"${hook_com[$tmp]//\\%/%%}\" \n-\tdone\n-\tVCS_INFO_hook 'post-backend'\n-\tif [[ -n ${hook_com[action]} ]]\n-\tthen\n-\t\tzstyle -a \":vcs_info:${vcs}:${usercontext}:${rrn}\" actionformats msgs\n-\t\t(( ${#msgs} < 1 )) && msgs[1]=' (%s)-[%b|%a]%u%c-' \n-\telse\n-\t\tzstyle -a \":vcs_info:${vcs}:${usercontext}:${rrn}\" formats msgs\n-\t\t(( ${#msgs} < 1 )) && msgs[1]=' (%s)-[%b]%u%c-' \n-\tfi\n-\tif [[ -n ${hook_com[staged]} ]]\n-\tthen\n-\t\tzstyle -s \":vcs_info:${vcs}:${usercontext}:${rrn}\" stagedstr tmp\n-\t\t[[ -z ${tmp} ]] && hook_com[staged]='S'  || hook_com[staged]=${tmp} \n-\tfi\n-\tif [[ -n ${hook_com[unstaged]} ]]\n-\tthen\n-\t\tzstyle -s \":vcs_info:${vcs}:${usercontext}:${rrn}\" unstagedstr tmp\n-\t\t[[ -z ${tmp} ]] && hook_com[unstaged]='U'  || hook_com[unstaged]=${tmp} \n-\tfi\n-\tif [[ ${quiltmode} != 'standalone' ]] && VCS_INFO_hook \"pre-addon-quilt\"\n-\tthen\n-\t\tlocal REPLY\n-\t\tVCS_INFO_quilt addon\n-\t\thook_com[quilt]=\"${REPLY}\" \n-\t\tunset REPLY\n-\telif [[ ${quiltmode} == 'standalone' ]]\n-\tthen\n-\t\thook_com[quilt]=${hook_com[misc]} \n-\tfi\n-\t(( ${#msgs} > maxexports )) && msgs[$(( maxexports + 1 )),-1]=() \n-\tfor i in {1..${#msgs}}\n-\tdo\n-\t\tif VCS_INFO_hook \"set-message\" $(( $i - 1 )) \"${msgs[$i]}\"\n-\t\tthen\n-\t\t\tzformat -f msg ${msgs[$i]} a:${hook_com[action]} b:${hook_com[branch]} c:${hook_com[staged]} i:${hook_com[revision]} m:${hook_com[misc]} r:${hook_com[base-name]} s:${hook_com[vcs]} u:${hook_com[unstaged]} Q:${hook_com[quilt]} R:${hook_com[base]} S:${hook_com[subdir]}\n-\t\t\tmsgs[$i]=${msg} \n-\t\telse\n-\t\t\tmsgs[$i]=${hook_com[message]} \n-\t\tfi\n-\tdone\n-\thook_com=() \n-\tbackend_misc=() \n-\treturn 0\n-}\n-add-zsh-hook () {\n-\temulate -L zsh\n-\tlocal -a hooktypes\n-\thooktypes=(chpwd precmd preexec periodic zshaddhistory zshexit zsh_directory_name) \n-\tlocal usage=\"Usage: add-zsh-hook hook function\\nValid hooks are:\\n  $hooktypes\" \n-\tlocal opt\n-\tlocal -a autoopts\n-\tinteger del list help\n-\twhile getopts \"dDhLUzk\" opt\n-\tdo\n-\t\tcase $opt in\n-\t\t\t(d) del=1  ;;\n-\t\t\t(D) del=2  ;;\n-\t\t\t(h) help=1  ;;\n-\t\t\t(L) list=1  ;;\n-\t\t\t([Uzk]) autoopts+=(-$opt)  ;;\n-\t\t\t(*) return 1 ;;\n-\t\tesac\n-\tdone\n-\tshift $(( OPTIND - 1 ))\n-\tif (( list ))\n-\tthen\n-\t\ttypeset -mp \"(${1:-${(@j:|:)hooktypes}})_functions\"\n-\t\treturn $?\n-\telif (( help || $# != 2 || ${hooktypes[(I)$1]} == 0 ))\n-\tthen\n-\t\tprint -u$(( 2 - help )) $usage\n-\t\treturn $(( 1 - help ))\n-\tfi\n-\tlocal hook=\"${1}_functions\" \n-\tlocal fn=\"$2\" \n-\tif (( del ))\n-\tthen\n-\t\tif (( ${(P)+hook} ))\n-\t\tthen\n-\t\t\tif (( del == 2 ))\n-\t\t\tthen\n-\t\t\t\tset -A $hook ${(P)hook:#${~fn}}\n-\t\t\telse\n-\t\t\t\tset -A $hook ${(P)hook:#$fn}\n-\t\t\tfi\n-\t\t\tif (( ! ${(P)#hook} ))\n-\t\t\tthen\n-\t\t\t\tunset $hook\n-\t\t\tfi\n-\t\tfi\n-\telse\n-\t\tif (( ${(P)+hook} ))\n-\t\tthen\n-\t\t\tif (( ${${(P)hook}[(I)$fn]} == 0 ))\n-\t\t\tthen\n-\t\t\t\ttypeset -ga $hook\n-\t\t\t\tset -A $hook ${(P)hook} $fn\n-\t\t\tfi\n-\t\telse\n-\t\t\ttypeset -ga $hook\n-\t\t\tset -A $hook $fn\n-\t\tfi\n-\t\tautoload $autoopts -- $fn\n-\tfi\n-}\n-alias_value () {\n-\t(( $+aliases[$1] )) && echo $aliases[$1]\n-}\n-azure_prompt_info () {\n-\treturn 1\n-}\n-bashcompinit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-bracketed-paste-magic () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-bzr_prompt_info () {\n-\tlocal bzr_branch\n-\tbzr_branch=$(bzr nick 2>/dev/null)  || return\n-\tif [[ -n \"$bzr_branch\" ]]\n-\tthen\n-\t\tlocal bzr_dirty=\"\" \n-\t\tif [[ -n $(bzr status 2>/dev/null) ]]\n-\t\tthen\n-\t\t\tbzr_dirty=\" %{$fg[red]%}*%{$reset_color%}\" \n-\t\tfi\n-\t\tprintf \"%s%s%s%s\" \"$ZSH_THEME_SCM_PROMPT_PREFIX\" \"bzr::${bzr_branch##*:}\" \"$bzr_dirty\" \"$ZSH_THEME_GIT_PROMPT_SUFFIX\"\n-\tfi\n-}\n-chruby_prompt_info () {\n-\treturn 1\n-}\n-clipcopy () {\n-\tunfunction clipcopy clippaste\n-\tdetect-clipboard || true\n-\t\"$0\" \"$@\"\n-}\n-clippaste () {\n-\tunfunction clipcopy clippaste\n-\tdetect-clipboard || true\n-\t\"$0\" \"$@\"\n-}\n-colors () {\n-\temulate -L zsh\n-\ttypeset -Ag color colour\n-\tcolor=(00 none 01 bold 02 faint 22 normal 03 standout 23 no-standout 04 underline 24 no-underline 05 blink 25 no-blink 07 reverse 27 no-reverse 08 conceal 28 no-conceal 30 black 40 bg-black 31 red 41 bg-red 32 green 42 bg-green 33 yellow 43 bg-yellow 34 blue 44 bg-blue 35 magenta 45 bg-magenta 36 cyan 46 bg-cyan 37 white 47 bg-white 39 default 49 bg-default) \n-\tlocal k\n-\tfor k in ${(k)color}\n-\tdo\n-\t\tcolor[${color[$k]}]=$k \n-\tdone\n-\tfor k in ${color[(I)3?]}\n-\tdo\n-\t\tcolor[fg-${color[$k]}]=$k \n-\tdone\n-\tcolor[grey]=${color[black]} \n-\tcolor[fg-grey]=${color[grey]} \n-\tcolor[bg-grey]=${color[bg-black]} \n-\tcolour=(${(kv)color}) \n-\tlocal lc=$'\\e[' rc=m \n-\ttypeset -Hg reset_color bold_color\n-\treset_color=\"$lc${color[none]}$rc\" \n-\tbold_color=\"$lc${color[bold]}$rc\" \n-\ttypeset -AHg fg fg_bold fg_no_bold\n-\tfor k in ${(k)color[(I)fg-*]}\n-\tdo\n-\t\tfg[${k#fg-}]=\"$lc${color[$k]}$rc\" \n-\t\tfg_bold[${k#fg-}]=\"$lc${color[bold]};${color[$k]}$rc\" \n-\t\tfg_no_bold[${k#fg-}]=\"$lc${color[normal]};${color[$k]}$rc\" \n-\tdone\n-\ttypeset -AHg bg bg_bold bg_no_bold\n-\tfor k in ${(k)color[(I)bg-*]}\n-\tdo\n-\t\tbg[${k#bg-}]=\"$lc${color[$k]}$rc\" \n-\t\tbg_bold[${k#bg-}]=\"$lc${color[bold]};${color[$k]}$rc\" \n-\t\tbg_no_bold[${k#bg-}]=\"$lc${color[normal]};${color[$k]}$rc\" \n-\tdone\n-}\n-compaudit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compdef () {\n-\tlocal opt autol type func delete eval new i ret=0 cmd svc \n-\tlocal -a match mbegin mend\n-\temulate -L zsh\n-\tsetopt extendedglob\n-\tif (( ! $# ))\n-\tthen\n-\t\tprint -u2 \"$0: I need arguments\"\n-\t\treturn 1\n-\tfi\n-\twhile getopts \"anpPkKde\" opt\n-\tdo\n-\t\tcase \"$opt\" in\n-\t\t\t(a) autol=yes  ;;\n-\t\t\t(n) new=yes  ;;\n-\t\t\t([pPkK]) if [[ -n \"$type\" ]]\n-\t\t\t\tthen\n-\t\t\t\t\tprint -u2 \"$0: type already set to $type\"\n-\t\t\t\t\treturn 1\n-\t\t\t\tfi\n-\t\t\t\tif [[ \"$opt\" = p ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=pattern \n-\t\t\t\telif [[ \"$opt\" = P ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=postpattern \n-\t\t\t\telif [[ \"$opt\" = K ]]\n-\t\t\t\tthen\n-\t\t\t\t\ttype=widgetkey \n-\t\t\t\telse\n-\t\t\t\t\ttype=key \n-\t\t\t\tfi ;;\n-\t\t\t(d) delete=yes  ;;\n-\t\t\t(e) eval=yes  ;;\n-\t\tesac\n-\tdone\n-\tshift OPTIND-1\n-\tif (( ! $# ))\n-\tthen\n-\t\tprint -u2 \"$0: I need arguments\"\n-\t\treturn 1\n-\tfi\n-\tif [[ -z \"$delete\" ]]\n-\tthen\n-\t\tif [[ -z \"$eval\" ]] && [[ \"$1\" = *\\=* ]]\n-\t\tthen\n-\t\t\twhile (( $# ))\n-\t\t\tdo\n-\t\t\t\tif [[ \"$1\" = *\\=* ]]\n-\t\t\t\tthen\n-\t\t\t\t\tcmd=\"${1%%\\=*}\" \n-\t\t\t\t\tsvc=\"${1#*\\=}\" \n-\t\t\t\t\tfunc=\"$_comps[${_services[(r)$svc]:-$svc}]\" \n-\t\t\t\t\t[[ -n ${_services[$svc]} ]] && svc=${_services[$svc]} \n-\t\t\t\t\t[[ -z \"$func\" ]] && func=\"${${_patcomps[(K)$svc][1]}:-${_postpatcomps[(K)$svc][1]}}\" \n-\t\t\t\t\tif [[ -n \"$func\" ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\t_comps[$cmd]=\"$func\" \n-\t\t\t\t\t\t_services[$cmd]=\"$svc\" \n-\t\t\t\t\telse\n-\t\t\t\t\t\tprint -u2 \"$0: unknown command or service: $svc\"\n-\t\t\t\t\t\tret=1 \n-\t\t\t\t\tfi\n-\t\t\t\telse\n-\t\t\t\t\tprint -u2 \"$0: invalid argument: $1\"\n-\t\t\t\t\tret=1 \n-\t\t\t\tfi\n-\t\t\t\tshift\n-\t\t\tdone\n-\t\t\treturn ret\n-\t\tfi\n-\t\tfunc=\"$1\" \n-\t\t[[ -n \"$autol\" ]] && autoload -Uz \"$func\"\n-\t\tshift\n-\t\tcase \"$type\" in\n-\t\t\t(widgetkey) while [[ -n $1 ]]\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ $# -lt 3 ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tprint -u2 \"$0: compdef -K requires <widget> <comp-widget> <key>\"\n-\t\t\t\t\t\treturn 1\n-\t\t\t\t\tfi\n-\t\t\t\t\t[[ $1 = _* ]] || 1=\"_$1\" \n-\t\t\t\t\t[[ $2 = .* ]] || 2=\".$2\" \n-\t\t\t\t\t[[ $2 = .menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$1\" \"$2\" \"$func\"\n-\t\t\t\t\tif [[ -n $new ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tbindkey \"$3\" | IFS=$' \\t' read -A opt\n-\t\t\t\t\t\t[[ $opt[-1] = undefined-key ]] && bindkey \"$3\" \"$1\"\n-\t\t\t\t\telse\n-\t\t\t\t\t\tbindkey \"$3\" \"$1\"\n-\t\t\t\t\tfi\n-\t\t\t\t\tshift 3\n-\t\t\t\tdone ;;\n-\t\t\t(key) if [[ $# -lt 2 ]]\n-\t\t\t\tthen\n-\t\t\t\t\tprint -u2 \"$0: missing keys\"\n-\t\t\t\t\treturn 1\n-\t\t\t\tfi\n-\t\t\t\tif [[ $1 = .* ]]\n-\t\t\t\tthen\n-\t\t\t\t\t[[ $1 = .menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$func\" \"$1\" \"$func\"\n-\t\t\t\telse\n-\t\t\t\t\t[[ $1 = menu-select ]] && zmodload -i zsh/complist\n-\t\t\t\t\tzle -C \"$func\" \".$1\" \"$func\"\n-\t\t\t\tfi\n-\t\t\t\tshift\n-\t\t\t\tfor i\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ -n $new ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\tbindkey \"$i\" | IFS=$' \\t' read -A opt\n-\t\t\t\t\t\t[[ $opt[-1] = undefined-key ]] || continue\n-\t\t\t\t\tfi\n-\t\t\t\t\tbindkey \"$i\" \"$func\"\n-\t\t\t\tdone ;;\n-\t\t\t(*) while (( $# ))\n-\t\t\t\tdo\n-\t\t\t\t\tif [[ \"$1\" = -N ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=normal \n-\t\t\t\t\telif [[ \"$1\" = -p ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=pattern \n-\t\t\t\t\telif [[ \"$1\" = -P ]]\n-\t\t\t\t\tthen\n-\t\t\t\t\t\ttype=postpattern \n-\t\t\t\t\telse\n-\t\t\t\t\t\tcase \"$type\" in\n-\t\t\t\t\t\t\t(pattern) if [[ $1 = (#b)(*)=(*) ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_patcomps[$match[1]]=\"=$match[2]=$func\" \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\t_patcomps[$1]=\"$func\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\t\t(postpattern) if [[ $1 = (#b)(*)=(*) ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_postpatcomps[$match[1]]=\"=$match[2]=$func\" \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\t_postpatcomps[$1]=\"$func\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\t\t(*) if [[ \"$1\" = *\\=* ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\tcmd=\"${1%%\\=*}\" \n-\t\t\t\t\t\t\t\t\tsvc=yes \n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t\tcmd=\"$1\" \n-\t\t\t\t\t\t\t\t\tsvc= \n-\t\t\t\t\t\t\t\tfi\n-\t\t\t\t\t\t\t\tif [[ -z \"$new\" || -z \"${_comps[$1]}\" ]]\n-\t\t\t\t\t\t\t\tthen\n-\t\t\t\t\t\t\t\t\t_comps[$cmd]=\"$func\" \n-\t\t\t\t\t\t\t\t\t[[ -n \"$svc\" ]] && _services[$cmd]=\"${1#*\\=}\" \n-\t\t\t\t\t\t\t\tfi ;;\n-\t\t\t\t\t\tesac\n-\t\t\t\t\tfi\n-\t\t\t\t\tshift\n-\t\t\t\tdone ;;\n-\t\tesac\n-\telse\n-\t\tcase \"$type\" in\n-\t\t\t(pattern) unset \"_patcomps[$^@]\" ;;\n-\t\t\t(postpattern) unset \"_postpatcomps[$^@]\" ;;\n-\t\t\t(key) print -u2 \"$0: cannot restore key bindings\"\n-\t\t\t\treturn 1 ;;\n-\t\t\t(*) unset \"_comps[$^@]\" ;;\n-\t\tesac\n-\tfi\n-}\n-compdump () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compgen () {\n-\tlocal opts prefix suffix job OPTARG OPTIND ret=1 \n-\tlocal -a name res results jids\n-\tlocal -A shortopts\n-\temulate -L sh\n-\tsetopt kshglob noshglob braceexpand nokshautoload\n-\tshortopts=(a alias b builtin c command d directory e export f file g group j job k keyword u user v variable) \n-\twhile getopts \"o:A:G:C:F:P:S:W:X:abcdefgjkuv\" name\n-\tdo\n-\t\tcase $name in\n-\t\t\t([abcdefgjkuv]) OPTARG=\"${shortopts[$name]}\"  ;&\n-\t\t\t(A) case $OPTARG in\n-\t\t\t\t\t(alias) results+=(\"${(k)aliases[@]}\")  ;;\n-\t\t\t\t\t(arrayvar) results+=(\"${(k@)parameters[(R)array*]}\")  ;;\n-\t\t\t\t\t(binding) results+=(\"${(k)widgets[@]}\")  ;;\n-\t\t\t\t\t(builtin) results+=(\"${(k)builtins[@]}\" \"${(k)dis_builtins[@]}\")  ;;\n-\t\t\t\t\t(command) results+=(\"${(k)commands[@]}\" \"${(k)aliases[@]}\" \"${(k)builtins[@]}\" \"${(k)functions[@]}\" \"${(k)reswords[@]}\")  ;;\n-\t\t\t\t\t(directory) setopt bareglobqual\n-\t\t\t\t\t\tresults+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N-/)) \n-\t\t\t\t\t\tsetopt nobareglobqual ;;\n-\t\t\t\t\t(disabled) results+=(\"${(k)dis_builtins[@]}\")  ;;\n-\t\t\t\t\t(enabled) results+=(\"${(k)builtins[@]}\")  ;;\n-\t\t\t\t\t(export) results+=(\"${(k)parameters[(R)*export*]}\")  ;;\n-\t\t\t\t\t(file) setopt bareglobqual\n-\t\t\t\t\t\tresults+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N)) \n-\t\t\t\t\t\tsetopt nobareglobqual ;;\n-\t\t\t\t\t(function) results+=(\"${(k)functions[@]}\")  ;;\n-\t\t\t\t\t(group) emulate zsh\n-\t\t\t\t\t\t_groups -U -O res\n-\t\t\t\t\t\temulate sh\n-\t\t\t\t\t\tsetopt kshglob noshglob braceexpand\n-\t\t\t\t\t\tresults+=(\"${res[@]}\")  ;;\n-\t\t\t\t\t(hostname) emulate zsh\n-\t\t\t\t\t\t_hosts -U -O res\n-\t\t\t\t\t\temulate sh\n-\t\t\t\t\t\tsetopt kshglob noshglob braceexpand\n-\t\t\t\t\t\tresults+=(\"${res[@]}\")  ;;\n-\t\t\t\t\t(job) results+=(\"${savejobtexts[@]%% *}\")  ;;\n-\t\t\t\t\t(keyword) results+=(\"${(k)reswords[@]}\")  ;;\n-\t\t\t\t\t(running) jids=(\"${(@k)savejobstates[(R)running*]}\") \n-\t\t\t\t\t\tfor job in \"${jids[@]}\"\n-\t\t\t\t\t\tdo\n-\t\t\t\t\t\t\tresults+=(${savejobtexts[$job]%% *}) \n-\t\t\t\t\t\tdone ;;\n-\t\t\t\t\t(stopped) jids=(\"${(@k)savejobstates[(R)suspended*]}\") \n-\t\t\t\t\t\tfor job in \"${jids[@]}\"\n-\t\t\t\t\t\tdo\n-\t\t\t\t\t\t\tresults+=(${savejobtexts[$job]%% *}) \n-\t\t\t\t\t\tdone ;;\n-\t\t\t\t\t(setopt | shopt) results+=(\"${(k)options[@]}\")  ;;\n-\t\t\t\t\t(signal) results+=(\"SIG${^signals[@]}\")  ;;\n-\t\t\t\t\t(user) results+=(\"${(k)userdirs[@]}\")  ;;\n-\t\t\t\t\t(variable) results+=(\"${(k)parameters[@]}\")  ;;\n-\t\t\t\t\t(helptopic)  ;;\n-\t\t\t\tesac ;;\n-\t\t\t(F) COMPREPLY=() \n-\t\t\t\tlocal -a args\n-\t\t\t\targs=(\"${words[0]}\" \"${@[-1]}\" \"${words[CURRENT-2]}\") \n-\t\t\t\t() {\n-\t\t\t\t\ttypeset -h words\n-\t\t\t\t\t$OPTARG \"${args[@]}\"\n-\t\t\t\t}\n-\t\t\t\tresults+=(\"${COMPREPLY[@]}\")  ;;\n-\t\t\t(G) setopt nullglob\n-\t\t\t\tresults+=(${~OPTARG}) \n-\t\t\t\tunsetopt nullglob ;;\n-\t\t\t(W) results+=(${(Q)~=OPTARG})  ;;\n-\t\t\t(C) results+=($(eval $OPTARG))  ;;\n-\t\t\t(P) prefix=\"$OPTARG\"  ;;\n-\t\t\t(S) suffix=\"$OPTARG\"  ;;\n-\t\t\t(X) if [[ ${OPTARG[0]} = '!' ]]\n-\t\t\t\tthen\n-\t\t\t\t\tresults=(\"${(M)results[@]:#${OPTARG#?}}\") \n-\t\t\t\telse\n-\t\t\t\t\tresults=(\"${results[@]:#$OPTARG}\") \n-\t\t\t\tfi ;;\n-\t\tesac\n-\tdone\n-\tprint -l -r -- \"$prefix${^results[@]}$suffix\"\n-}\n-compinit () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-compinstall () {\n-\t# undefined\n-\tbuiltin autoload -XUz\n-}\n-complete () {\n-\temulate -L zsh\n-\tlocal args void cmd print remove\n-\targs=(\"$@\") \n-\tzparseopts -D -a void o: A: G: W: C: F: P: S: X: a b c d e f g j k u v p=print r=remove\n-\tif [[ -n $print ]]\n-\tthen\n-\t\tprintf 'complete %2$s %1$s\\n' \"${(@kv)_comps[(R)_bash*]#* }\"\n-\telif [[ -n $remove ]]\n-\tthen\n-\t\tfor cmd\n-\t\tdo\n-\t\t\tunset \"_comps[$cmd]\"\n-\t\tdone\n-\telse\n-\t\tcompdef _bash_complete\\ ${(j. .)${(q)args[1,-1-$#]}} \"$@\"\n-\tfi\n-}\n-conda () {\n-\t\\local cmd=\"${1-__missing__}\"\n-\tcase \"$cmd\" in\n-\t\t(activate | deactivate) __conda_activate \"$@\" ;;\n-\t\t(install | update | upgrade | remove | uninstall) __conda_exe \"$@\" || \\return\n-\t\t\t__conda_reactivate ;;\n-\t\t(*) __conda_exe \"$@\" ;;\n-\tesac\n-}\n-conda_prompt_info () {\n-\treturn 1\n-}\n-current_branch () {\n-\tgit_current_branch\n-}\n-d () {\n-\tif [[ -n $1 ]]\n-\tthen\n-\t\tdirs \"$@\"\n-\telse\n-\t\tdirs -v | head -n 10\n-\tfi\n-}\n-default () {\n-\t(( $+parameters[$1] )) && return 0\n-\ttypeset -g \"$1\"=\"$2\" && return 3\n-}\n-detect-clipboard () {\n-\temulate -L zsh\n-\tif [[ \"${OSTYPE}\" == darwin* ]] && (( ${+commands[pbcopy]} )) && (( ${+commands[pbpaste]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | pbcopy\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tpbpaste\n-\t\t}\n-\telif [[ \"${OSTYPE}\" == (cygwin|msys)* ]]\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" > /dev/clipboard\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tcat /dev/clipboard\n-\t\t}\n-\telif (( $+commands[clip.exe] )) && (( $+commands[powershell.exe] ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | clip.exe\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tpowershell.exe -noprofile -command Get-Clipboard\n-\t\t}\n-\telif [ -n \"${WAYLAND_DISPLAY:-}\" ] && (( ${+commands[wl-copy]} )) && (( ${+commands[wl-paste]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | wl-copy &> /dev/null &|\n-\t\t}\n-\t\tclippaste () {\n-\t\t\twl-paste --no-newline\n-\t\t}\n-\telif [ -n \"${DISPLAY:-}\" ] && (( ${+commands[xsel]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | xsel --clipboard --input\n-\t\t}\n-\t\tclippaste () {\n-\t\t\txsel --clipboard --output\n-\t\t}\n-\telif [ -n \"${DISPLAY:-}\" ] && (( ${+commands[xclip]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | xclip -selection clipboard -in &> /dev/null &|\n-\t\t}\n-\t\tclippaste () {\n-\t\t\txclip -out -selection clipboard\n-\t\t}\n-\telif (( ${+commands[lemonade]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | lemonade copy\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tlemonade paste\n-\t\t}\n-\telif (( ${+commands[doitclient]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | doitclient wclip\n-\t\t}\n-\t\tclippaste () {\n-\t\t\tdoitclient wclip -r\n-\t\t}\n-\telif (( ${+commands[win32yank]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | win32yank -i\n-\t\t}\n-\t\tclippaste () {\n-\t\t\twin32yank -o\n-\t\t}\n-\telif [[ $OSTYPE == linux-android* ]] && (( $+commands[termux-clipboard-set] ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\tcat \"${1:-/dev/stdin}\" | termux-clipboard-set\n-\t\t}\n-\t\tclippaste () {\n-\t\t\ttermux-clipboard-get\n-\t\t}\n-\telif [ -n \"${TMUX:-}\" ] && (( ${+commands[tmux]} ))\n-\tthen\n-\t\tclipcopy () {\n-\t\t\ttmux load-buffer \"${1:--}\"\n-\t\t}\n-\t\tclippaste () {\n-\t\t\ttmux save-buffer -\n-\t\t}\n-\telse\n-\t\t_retry_clipboard_detection_or_fail () {\n-\t\t\tlocal clipcmd=\"${1}\" \n-\t\t\tshift\n-\t\t\tif detect-clipboard\n-\t\t\tthen\n-\t\t\t\t\"${clipcmd}\" \"$@\"\n-\t\t\telse\n-\t\t\t\tprint \"${clipcmd}: Platform $OSTYPE not supported or xclip/xsel not installed\" >&2\n-\t\t\t\treturn 1\n-\t\t\tfi\n-\t\t}\n-\t\tclipcopy () {\n-\t\t\t_retry_clipboard_detection_or_fail clipcopy \"$@\"\n-\t\t}\n-\t\tclippaste () {\n-\t\t\t_retry_clipboard_detection_or_fail clippaste \"$@\"\n-\t\t}\n-\t\treturn 1\n-\tfi\n-}\n-diff () {\n-\tcommand diff --color \"$@\"\n-}\n-down-line-or-beginning-search () {\n-\t# undefined\n-\tbuiltin autoload -XU\n-}\n-edit-command-line () {\n-\t# undefined\n-\tbuiltin autoload -XU\n-}\n-env_default () {\n-\t[[ ${parameters[$1]} = *-export* ]] && return 0\n-\texport \"$1=$2\" && return 3\n-}\n-gbda () {\n-\tgit branch --no-color --merged | command grep -vE \"^([+*]|\\s*($(git_main_branch)|$(git_develop_branch))\\s*$)\" | command xargs git branch --delete 2> /dev/null\n-}\n-gbds () {\n-\tlocal default_branch=$(git_main_branch) \n-\t(( ! $? )) || default_branch=$(git_develop_branch) \n-\tgit for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch\n-\tdo\n-\t\tlocal merge_base=$(git merge-base $default_branch $branch) \n-\t\tif [[ $(git cherry $default_branch $(git commit-tree $(git rev-parse $branch\\^{tree}) -p $merge_base -m _)) = -* ]]\n-\t\tthen\n-\t\t\tgit branch -D $branch\n-\t\tfi\n-\tdone\n-}\n-gccd () {\n-\tsetopt localoptions extendedglob\n-\tlocal repo=\"${${@[(r)(ssh://*|git://*|ftp(s)#://*|http(s)#://*|*@*)(.git/#)#]}:-$_}\" \n-\tcommand git clone --recurse-submodules \"$@\" || return\n-\t[[ -d \"$_\" ]] && cd \"$_\" || cd \"${${repo:t}%.git/#}\"\n-}\n-gdnolock () {\n-\tgit diff \"$@\" \":(exclude)package-lock.json\" \":(exclude)*.lock\"\n-}\n-gdv () {\n-\tgit diff -w \"$@\" | view -\n-}\n-getColorCode () {\n-\teval \"$__p9k_intro\"\n-\tif (( ARGC == 1 ))\n-\tthen\n-\t\tcase $1 in\n-\t\t\t(foreground) local k\n-\t\t\t\tfor k in \"${(k@)__p9k_colors}\"\n-\t\t\t\tdo\n-\t\t\t\t\tlocal v=${__p9k_colors[$k]} \n-\t\t\t\t\tprint -rP -- \"%F{$v}$v - $k%f\"\n-\t\t\t\tdone\n-\t\t\t\treturn 0 ;;\n-\t\t\t(background) local k\n-\t\t\t\tfor k in \"${(k@)__p9k_colors}\"\n-\t\t\t\tdo\n-\t\t\t\t\tlocal v=${__p9k_colors[$k]} \n-\t\t\t\t\tprint -rP -- \"%K{$v}$v - $k%k\"\n-\t\t\t\tdone\n-\t\t\t\treturn 0 ;;\n-\t\tesac\n-\tfi\n-\techo \"Usage: getColorCode background|foreground\" >&2\n-\treturn 1\n-}\n-get_icon_names () {\n-\teval \"$__p9k_intro\"\n-\t_p9k_init_icons\n-\tlocal key\n-\tfor key in ${(@kon)icons}\n-\tdo\n-\t\techo -n - \"POWERLEVEL9K_$key: \"\n-\t\tprint -nP \"%K{red} %k\"\n-\t\tif [[ $1 == original ]]\n-\t\tthen\n-\t\t\techo -n - $icons[$key]\n-\t\telse\n-\t\t\tprint_icon $key\n-\t\tfi\n-\t\tprint -P \"%K{red} %k\"\n-\tdone\n-}\n-ggf () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit push --force origin \"${b:=$1}\"\n-}\n-ggfl () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit push --force-with-lease origin \"${b:=$1}\"\n-}\n-ggl () {\n-\tif [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]\n-\tthen\n-\t\tgit pull origin \"${*}\"\n-\telse\n-\t\t[[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\" \n-\t\tgit pull origin \"${b:=$1}\"\n-\tfi\n-}\n-ggp () {\n-\tif [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]\n-\tthen\n-\t\tgit push origin \"${*}\"\n-\telse\n-\t\t[[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\" \n-\t\tgit push origin \"${b:=$1}\"\n-\tfi\n-}\n-ggpnp () {\n-\tif [[ \"$#\" == 0 ]]\n-\tthen\n-\t\tggl && ggp\n-\telse\n-\t\tggl \"${*}\" && ggp \"${*}\"\n-\tfi\n-}\n-ggu () {\n-\t[[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\" \n-\tgit pull --rebase origin \"${b:=$1}\"\n-}\n-git_commits_ahead () {\n-\tif __git_prompt_git rev-parse --git-dir &> /dev/null\n-\tthen\n-\t\tlocal commits=\"$(__git_prompt_git rev-list --count @{upstream}..HEAD 2>/dev/null)\" \n-\t\tif [[ -n \"$commits\" && \"$commits\" != 0 ]]\n-\t\tthen\n-\t\t\techo \"$ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX$commits$ZSH_THEME_GIT_COMMITS_AHEAD_SUFFIX\"\n-\t\tfi\n-\tfi\n-}\n-git_commits_behind () {\n-\tif __git_prompt_git rev-parse --git-dir &> /dev/null\n-\tthen\n-\t\tlocal commits=\"$(__git_prompt_git rev-list --count HEAD..@{upstream} 2>/dev/null)\" \n-\t\tif [[ -n \"$commits\" && \"$commits\" != 0 ]]\n-\t\tthen\n-\t\t\techo \"$ZSH_THEME_GIT_COMMITS_BEHIND_PREFIX$commits$ZSH_THEME_GIT_COMMITS_BEHIND_SUFFIX\"\n-\t\tfi\n-\tfi\n-}\n-git_current_branch () {\n-\tlocal ref\n-\tref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null) \n-\tlocal ret=$? \n-\tif [[ $ret != 0 ]]\n-\tthen\n-\t\t[[ $ret == 128 ]] && return\n-\t\tref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  || return\n-\tfi\n-\techo ${ref#refs/heads/}\n-}\n-git_current_user_email () {\n-\t__git_prompt_git config user.email 2> /dev/null\n-}\n-git_current_user_name () {\n-\t__git_prompt_git config user.name 2> /dev/null\n-}\n-git_develop_branch () {\n-\tcommand git rev-parse --git-dir &> /dev/null || return\n-\tlocal branch\n-\tfor branch in dev devel develop development\n-\tdo\n-\t\tif command git show-ref -q --verify refs/heads/$branch\n-\t\tthen\n-\t\t\techo $branch\n-\t\t\treturn 0\n-\t\tfi\n-\tdone\n-\techo develop\n-\treturn 1\n-}\n-git_main_branch () {\n-\tcommand git rev-parse --git-dir &> /dev/null || return\n-\tlocal ref\n-\tfor ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default,stable,master}\n-\tdo\n-\t\tif command git show-ref -q --verify $ref\n-\t\tthen\n-\t\t\techo ${ref:t}\n-\t\t\treturn 0\n-\t\tfi\n-\tdone\n-\techo master\n-\treturn 1\n-}\n-git_previous_branch () {\n-\tlocal ref\n-\tref=$(__git_prompt_git rev-parse --quiet --symbolic-full-name @{-1} 2> /dev/null) \n-\tlocal ret=$? \n-\tif [[ $ret != 0 ]] || [[ -z $ref ]]\n-\tthen\n-\t\treturn\n-\tfi\n-\techo ${ref#refs/heads/}\n-}\n-git_prompt_ahead () {\n-\tif [[ -n \"$(__git_prompt_git rev-list origin/$(git_current_branch)..HEAD 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_AHEAD\"\n-\tfi\n-}\n-git_prompt_behind () {\n-\tif [[ -n \"$(__git_prompt_git rev-list HEAD..origin/$(git_current_branch) 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_BEHIND\"\n-\tfi\n-}\n-git_prompt_info () {\n-\tif [[ -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_info]}\" ]]\n-\tthen\n-\t\techo -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_info]}\"\n-\tfi\n-}\n-git_prompt_long_sha () {\n-\tlocal SHA\n-\tSHA=$(__git_prompt_git rev-parse HEAD 2> /dev/null)  && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n-}\n-git_prompt_remote () {\n-\tif [[ -n \"$(__git_prompt_git show-ref origin/$(git_current_branch) 2> /dev/null)\" ]]\n-\tthen\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_REMOTE_EXISTS\"\n-\telse\n-\t\techo \"$ZSH_THEME_GIT_PROMPT_REMOTE_MISSING\"\n-\tfi\n-}\n-git_prompt_short_sha () {\n-\tlocal SHA\n-\tSHA=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  && echo \"$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER\"\n-}\n-git_prompt_status () {\n-\tif [[ -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_status]}\" ]]\n-\tthen\n-\t\techo -n \"${_OMZ_ASYNC_OUTPUT[_omz_git_prompt_status]}\"\n-\tfi\n-}\n-git_remote_status () {\n-\tlocal remote ahead behind git_remote_status git_remote_status_detailed\n-\tremote=${$(__git_prompt_git rev-parse --verify ${hook_com[branch]}@{upstream} --symbolic-full-name 2>/dev/null)/refs\\/remotes\\/} \n-\tif [[ -n ${remote} ]]\n-\tthen\n-\t\tahead=$(__git_prompt_git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l) \n-\t\tbehind=$(__git_prompt_git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l) \n-\t\tif [[ $ahead -eq 0 ]] && [[ $behind -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_EQUAL_REMOTE\" \n-\t\telif [[ $ahead -gt 0 ]] && [[ $behind -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}\" \n-\t\telif [[ $behind -gt 0 ]] && [[ $ahead -eq 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}\" \n-\t\telif [[ $ahead -gt 0 ]] && [[ $behind -gt 0 ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE\" \n-\t\t\tgit_remote_status_detailed=\"$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}\" \n-\t\tfi\n-\t\tif [[ -n $ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_DETAILED ]]\n-\t\tthen\n-\t\t\tgit_remote_status=\"$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_PREFIX${remote:gs/%/%%}$git_remote_status_detailed$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_SUFFIX\" \n-\t\tfi\n-\t\techo $git_remote_status\n-\tfi\n-}\n-git_repo_name () {\n-\tlocal repo_path\n-\tif repo_path=\"$(__git_prompt_git rev-parse --show-toplevel 2>/dev/null)\"  && [[ -n \"$repo_path\" ]]\n-\tthen\n-\t\techo ${repo_path:t}\n-\tfi\n-}\n-grename () {\n-\tif [[ -z \"$1\" || -z \"$2\" ]]\n-\tthen\n-\t\techo \"Usage: $0 old_branch new_branch\"\n-\t\treturn 1\n-\tfi\n-\tgit branch -m \"$1\" \"$2\"\n-\tif git push origin :\"$1\"\n-\tthen\n-\t\tgit push --set-upstream origin \"$2\"\n-\tfi\n-}\n-gunwipall () {\n-\tlocal _commit=$(git log --grep='--wip--' --invert-grep --max-count=1 --format=format:%H) \n-\tif [[ \"$_commit\" != \"$(git rev-parse HEAD)\" ]]\n-\tthen\n-\t\tgit reset $_commit || return 1\n-\tfi\n-}\n-handle_completion_insecurities () {\n-\tlocal -aU insecure_dirs\n-\tinsecure_dirs=(${(f@):-\"$(compaudit 2>/dev/null)\"}) \n-\t[[ -z \"${insecure_dirs}\" ]] && return\n-\tprint \"[oh-my-zsh] Insecure completion-dependent directories detected:\"\n-\tls -ld \"${(@)insecure_dirs}\"\n-\tcat <<EOD\n-\n-[oh-my-zsh] For safety, we will not load completions from these directories until\n-[oh-my-zsh] you fix their permissions and ownership and restart zsh.\n-[oh-my-zsh] See the above list for directories with group or other writability.\n-\n-[oh-my-zsh] To fix your permissions you can do so by disabling\n-[oh-my-zsh] the write permission of \"group\" and \"others\" and making sure that the\n-[oh-my-zsh] owner of these directories is either root or your current user.\n-[oh-my-zsh] The following command may help:\n-[oh-my-zsh]     compaudit | xargs chmod g-w,o-w\n-\n-[oh-my-zsh] If the above didn't help or you want to skip the verification of\n-[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to\n-[oh-my-zsh] \"true\" before oh-my-zsh is sourced in your zshrc file.\n-\n-EOD\n-}\n-hg_prompt_info () {\n-\treturn 1\n-}\n-instant_prompt__p9k_internal_nothing () {\n-\tprompt__p9k_internal_nothing\n-}\n-instant_prompt_context () {\n-\tif [[ $_POWERLEVEL9K_ALWAYS_SHOW_CONTEXT == 0 && -n $DEFAULT_USER && $P9K_SSH == 0 ]]\n-\tthen\n-\t\tif [[ ${(%):-%n} == $DEFAULT_USER ]]\n-\t\tthen\n-\t\t\tif (( ! _POWERLEVEL9K_ALWAYS_SHOW_USER ))\n-\t\t\tthen\n-\t\t\t\treturn\n-\t\t\tfi\n-\t\tfi\n-\tfi\n-\tprompt_context\n-}\n-instant_prompt_date () {\n-\t_p9k_escape $_POWERLEVEL9K_DATE_FORMAT\n-\tlocal stash='${${__p9k_instant_prompt_date::=${(%)${__p9k_instant_prompt_date_format::='$_p9k__ret'}}}+}' \n-\t_p9k_escape $_POWERLEVEL9K_DATE_FORMAT\n-\t_p9k_prompt_segment prompt_date \"$_p9k_color2\" \"$_p9k_color1\" \"DATE_ICON\" 1 '' $stash$_p9k__ret\n-}\n-instant_prompt_dir () {\n-\tprompt_dir\n-}\n-instant_prompt_dir_writable () {\n-\tprompt_dir_writable\n-}\n-instant_prompt_direnv () {\n-\tif [[ -n $DIRENV_DIR && $precmd_functions[-1] == _p9k_precmd ]]\n-\tthen\n-\t\t_p9k_prompt_segment prompt_direnv $_p9k_color1 yellow DIRENV_ICON 0 '' ''\n-\tfi\n-}\n-instant_prompt_example () {\n-\tprompt_example\n-}\n-instant_prompt_host () {\n-\tprompt_host\n-}\n-instant_prompt_midnight_commander () {\n-\t_p9k_prompt_segment prompt_midnight_commander $_p9k_color1 yellow MIDNIGHT_COMMANDER_ICON 0 '$MC_TMPDIR' ''\n-}\n-instant_prompt_nix_shell () {\n-\t_p9k_prompt_segment prompt_nix_shell 4 $_p9k_color1 NIX_SHELL_ICON 1 '${IN_NIX_SHELL:#0}' '${(M)IN_NIX_SHELL:#(pure|impure)}'\n-}\n-instant_prompt_nnn () {\n-\t_p9k_prompt_segment prompt_nnn 6 $_p9k_color1 NNN_ICON 1 '${NNNLVL:#0}' '$NNNLVL'\n-}\n-instant_prompt_os_icon () {\n-\tprompt_os_icon\n-}\n-instant_prompt_prompt_char () {\n-\t_p9k_prompt_segment prompt_prompt_char_OK_VIINS \"$_p9k_color1\" 76 '' 0 '' '❯'\n-}\n-instant_prompt_ranger () {\n-\t_p9k_prompt_segment prompt_ranger $_p9k_color1 yellow RANGER_ICON 1 '$RANGER_LEVEL' '$RANGER_LEVEL'\n-}\n-instant_prompt_root_indicator () {\n-\tprompt_root_indicator\n-}\n-instant_prompt_ssh () {\n-\tif (( ! P9K_SSH ))\n-\tthen\n-\t\treturn\n-\tfi\n-\tprompt_ssh\n-}\n-instant_prompt_status () {\n-\tif (( _POWERLEVEL9K_STATUS_OK ))\n-\tthen\n-\t\t_p9k_prompt_segment prompt_status_OK \"$_p9k_color1\" green OK_ICON 0 '' ''\n-\tfi\n-}\n-instant_prompt_time () {\n-\t_p9k_escape $_POWERLEVEL9K_TIME_FORMAT\n-\tlocal stash='${${__p9k_instant_prompt_time::=${(%)${__p9k_instant_prompt_time_format::='$_p9k__ret'}}}+}' \n-\t_p9k_escape $_POWERLEVEL9K_TIME_FORMAT\n-\t_p9k_prompt_segment prompt_time \"$_p9k_color2\" \"$_p9k_color1\" \"TIME_ICON\" 1 '' $stash$_p9k__ret\n-}\n-instant_prompt_user () {\n-\tif [[ $_POWERLEVEL9K_ALWAYS_SHOW_USER == 0 && \"${(%):-%n}\" == $DEFAULT_USER ]]\n-\tthen\n-\t\treturn\n-\tfi\n-\tprompt_user\n-}\n-instant_prompt_vi_mode () {\n-\tif [[ -n $_POWERLEVEL9K_VI_INSERT_MODE_STRING ]]\n-\tthen\n-\t\t_p9k_prompt_segment prompt_vi_mode_INSERT \"$_p9k_color1\" blue '' 0 '' \"$_POWERLEVEL9K_VI_INSERT_MODE_STRING\"\n-\tfi\n-}\n-instant_prompt_vim_shell () {\n-\t_p9k_prompt_segment prompt_vim_shell green $_p9k_color1 VIM_ICON 0 '$VIMRUNTIME' ''\n-}\n-instant_prompt_xplr () {\n-\t_p9k_prompt_segment prompt_xplr 6 $_p9k_color1 XPLR_ICON 0 '$XPLR_PID' ''\n-}\n-is-at-least () {\n-\temulate -L zsh\n-\tlocal IFS=\".-\" min_cnt=0 ver_cnt=0 part min_ver version order \n-\tmin_ver=(${=1}) \n-\tversion=(${=2:-$ZSH_VERSION} 0) \n-\twhile (( $min_cnt <= ${#min_ver} ))\n-\tdo\n-\t\twhile [[ \"$part\" != <-> ]]\n-\t\tdo\n-\t\t\t(( ++ver_cnt > ${#version} )) && return 0\n-\t\t\tif [[ ${version[ver_cnt]} = *[0-9][^0-9]* ]]\n-\t\t\tthen\n-\t\t\t\torder=(${version[ver_cnt]} ${min_ver[ver_cnt]}) \n-\t\t\t\tif [[ ${version[ver_cnt]} = <->* ]]\n-\t\t\t\tthen\n-\t\t\t\t\t[[ $order != ${${(On)order}} ]] && return 1\n-\t\t\t\telse\n-\t\t\t\t\t[[ $order != ${${(O)order}} ]] && return 1\n-\t\t\t\tfi\n-\t\t\t\t[[ $order[1] != $order[2] ]] && return 0\n-\t\t\tfi\n-\t\t\tpart=$\n\n... [7206 lines truncated] ...","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"ea577f90-a867-4113-a0ef-b4f2f672e93e","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01Up5H9LxSi6Bv4VxpxBpAUo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017tbCpto4YbhzxepDTzTgur","name":"Bash","input":{"command":"git add .","description":"Add all changes to staging area"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":103,"cache_creation_input_tokens":14642,"cache_read_input_tokens":14812,"output_tokens":22,"service_tier":"standard"}},"requestId":"req_011CRGGtBeigTbJNm7BE9RBD","type":"assistant","uuid":"cf9e23c7-ebd6-4526-a6d8-16c13089be44","timestamp":"2025-07-19T11:10:20.340Z"}
{"parentUuid":"cf9e23c7-ebd6-4526-a6d8-16c13089be44","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01Up5H9LxSi6Bv4VxpxBpAUo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01RtMHb3ZyZYeV3P1sBjscBW","name":"Bash","input":{"command":"git commit -m \"$(cat <<'EOF'\nUpdate CLAUDE.md with cross-location workflow guidelines\n\nAdded cross-location workflow section with pull/commit/push practices\nand cleaned up old shell snapshot.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\"","description":"Create commit with formatted message"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":103,"cache_creation_input_tokens":14642,"cache_read_input_tokens":14812,"output_tokens":22,"service_tier":"standard"}},"requestId":"req_011CRGGtBeigTbJNm7BE9RBD","type":"assistant","uuid":"c3835298-fd13-48bc-b94f-36d91dba311f","timestamp":"2025-07-19T11:10:23.152Z"}
{"parentUuid":"c3835298-fd13-48bc-b94f-36d91dba311f","isSidechain":false,"userType":"external","cwd":"/home/yanggf/.claude","sessionId":"9abd77ba-6e41-4e43-aff2-a3e7b0694c78","version":"1.0.56","gitBranch":"master","message":{"id":"msg_01Up5H9LxSi6Bv4VxpxBpAUo","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01LDSqpRJnf3y5mzkSJByF9r","name":"Bash","input":{"command":"git push","description":"Push changes to remote repository"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":103,"cache_creation_input_tokens":14642,"cache_read_input_tokens":14812,"output_tokens":275,"service_tier":"standard"}},"requestId":"req_011CRGGtBeigTbJNm7BE9RBD","type":"assistant","uuid":"1b4a77ae-4633-4ad5-958b-ada8b2f6595d","timestamp":"2025-07-19T11:10:23.743Z"}
