{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","type":"user","message":{"role":"user","content":"auth"},"uuid":"d1f401a8-11ed-4113-92d2-e31d6448a3f9","timestamp":"2025-06-20T07:15:42.722Z"}
{"type":"summary","summary":"Authentication System Development Basics","leafUuid":"d1f401a8-11ed-4113-92d2-e31d6448a3f9"}
{"type":"summary","summary":"Timesheet App Login and Git Status Review","leafUuid":"d3b584ff-211b-4c0e-a4f7-ead91700cff7"}
{"type":"summary","summary":"Claude Code Auth Troubleshooting and Login","leafUuid":"48c3f812-c022-4db9-8668-e2eda009b5ef"}
{"parentUuid":"d1f401a8-11ed-4113-92d2-e31d6448a3f9","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","message":{"id":"msg_014Qp1CcNayMvP2JkWTdjNQ7","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll help you with authentication. Let me first examine the current codebase to understand the structure and what kind of authentication you need."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":13555,"cache_read_input_tokens":0,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CQK4ZAFzV4PkQ9G318jZx","type":"assistant","uuid":"24e630d1-b27e-4807-be63-c8ba110c43e4","timestamp":"2025-06-20T07:15:47.526Z"}
{"parentUuid":"24e630d1-b27e-4807-be63-c8ba110c43e4","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","message":{"id":"msg_014Qp1CcNayMvP2JkWTdjNQ7","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_019yRkoqFGWn7BZSGfNMK8Y6","name":"LS","input":{"path":"/home/yanggf/a/timesheet"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":13555,"cache_read_input_tokens":0,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CQK4ZAFzV4PkQ9G318jZx","type":"assistant","uuid":"b3ab7ce3-bac3-4ef9-842d-8233374fd99e","timestamp":"2025-06-20T07:15:47.884Z"}
{"parentUuid":"b3ab7ce3-bac3-4ef9-842d-8233374fd99e","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_019yRkoqFGWn7BZSGfNMK8Y6","type":"tool_result","content":"- /home/yanggf/a/timesheet/\n  - activityType.csv\n  - app.js\n  - edit.html\n  - implementation-plan.md\n  - index.html\n  - modules/\n    - csvModule.js\n    - dateModule.js\n    - formModule.js\n    - storageModule.js\n    - uiModule.js\n  - productcode.csv\n  - projectcode.csv\n  - style.css\n  - technical-implementation.md\n  - timesheetplan.md\n  - user-guide-and-features.md\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"c05755ec-5ea9-4408-9052-72cabf463f97","timestamp":"2025-06-20T07:15:47.939Z","toolUseResult":"- /home/yanggf/a/timesheet/\n  - activityType.csv\n  - app.js\n  - edit.html\n  - implementation-plan.md\n  - index.html\n  - modules/\n    - csvModule.js\n    - dateModule.js\n    - formModule.js\n    - storageModule.js\n    - uiModule.js\n  - productcode.csv\n  - projectcode.csv\n  - style.css\n  - technical-implementation.md\n  - timesheetplan.md\n  - user-guide-and-features.md\n"}
{"parentUuid":"c05755ec-5ea9-4408-9052-72cabf463f97","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","message":{"id":"msg_014cm6wZgJtmKKqXZArCqbPS","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01RrctwSNKuyEcWrFLVkoQsy","name":"Read","input":{"file_path":"/home/yanggf/a/timesheet/app.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":262,"cache_read_input_tokens":13555,"output_tokens":22,"service_tier":"standard"}},"requestId":"req_011CQK4ZWh4kbRp9PDAWNwtj","type":"assistant","uuid":"ea53e7db-3491-4f3f-9722-2f4006c2ba52","timestamp":"2025-06-20T07:15:52.307Z"}
{"parentUuid":"ea53e7db-3491-4f3f-9722-2f4006c2ba52","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01RrctwSNKuyEcWrFLVkoQsy","type":"tool_result","content":"     1→import { loadAllTimesheets, saveAllTimesheets, loadGlobalBasicInfo, getWeekEntries, saveWeekEntries } from './modules/storageModule.js';\n     2→import { loadAllCSVData, getProjectsByZone, getPMByProject, getProductModulesByZone, updateProjectOptions, updateProjectDropdown, updateProductModuleDropdown, updateActivityTypeOptions, generateCSVContent, downloadCSVFile } from './modules/csvModule.js';\n     3→import { getWeekNumber, getWeekDateRangeFromKey } from './modules/dateModule.js';\n     4→import {\n     5→    showSuccessMessage,\n     6→    showCopyOptionsModal,\n     7→    closeCopyModal,\n     8→    handleCopySelection,\n     9→    copyWeekToTargetWeek\n    10→} from './modules/uiModule.js';\n    11→\n    12→// 設置日期欄位的限制範圍\n    13→function setDateFieldLimits(startDate, endDate) {\n    14→    const minDate = formatDate(startDate);\n    15→    const maxDate = formatDate(endDate);\n    16→    \n    17→    // 設置日期欄位的 min 和 max 屬性\n    18→    const dateFields = ['date', 'startDate', 'endDate'];\n    19→    dateFields.forEach(fieldId => {\n    20→        const field = document.getElementById(fieldId);\n    21→        if (field) {\n    22→            field.min = minDate;\n    23→            field.max = maxDate;\n    24→            \n    25→            // 如果欄位有值但超出範圍，則清空\n    26→            if (field.value) {\n    27→                const fieldDate = new Date(field.value);\n    28→                if (fieldDate < startDate || fieldDate > endDate) {\n    29→                    field.value = '';\n    30→                }\n    31→            }\n    32→        }\n    33→    });\n    34→}\n    35→\n    36→// 驗證日期是否在週範圍內\n    37→function validateDateInWeekRange(date, startDate, endDate) {\n    38→    if (!date) return true; // 空值允許\n    39→    \n    40→    const inputDate = new Date(date);\n    41→    return inputDate >= startDate && inputDate <= endDate;\n    42→}\n    43→\n    44→// 啟用正規化模式\n    45→function enableNormalizationMode(weekKey) {\n    46→    // 儲存正規化狀態到 localStorage\n    47→    const normalizationData = {\n    48→        weekKey: weekKey,\n    49→        enabled: true,\n    50→        timestamp: new Date().toISOString()\n    51→    };\n    52→    localStorage.setItem(`normalization_${weekKey}`, JSON.stringify(normalizationData));\n    53→    \n    54→    // 更新 UI 顯示正規化模式狀態\n    55→    updateNormalizationModeDisplay(weekKey);\n    56→}\n    57→\n    58→// 檢查是否啟用正規化模式\n    59→function isNormalizationEnabled(weekKey) {\n    60→    const data = localStorage.getItem(`normalization_${weekKey}`);\n    61→    return data ? JSON.parse(data).enabled : false;\n    62→}\n    63→\n    64→// 更新正規化模式顯示\n    65→function updateNormalizationModeDisplay(weekKey) {\n    66→    const isEnabled = isNormalizationEnabled(weekKey);\n    67→    const weekInfoDiv = document.querySelector('.week-info');\n    68→    \n    69→    // 移除舊的正規化提示\n    70→    const existingAlert = weekInfoDiv.querySelector('.normalization-alert');\n    71→    if (existingAlert) {\n    72→        existingAlert.remove();\n    73→    }\n    74→    \n    75→    if (isEnabled) {\n    76→        // 顯示正規化模式提示\n    77→        const alertDiv = document.createElement('div');\n    78→        alertDiv.className = 'normalization-alert';\n    79→        alertDiv.innerHTML = `\n    80→            <div class=\"alert alert-info\">\n    81→                <strong>📊 正規化模式已啟用</strong> - 該週工時超過40小時，匯出時將自動進行正規化計算\n    82→                <button onclick=\"disableNormalizationMode('${weekKey}')\" class=\"btn-disable-normalization\">停用</button>\n    83→            </div>\n    84→        `;\n    85→        weekInfoDiv.appendChild(alertDiv);\n    86→    }\n    87→}\n    88→\n    89→// 停用正規化模式\n    90→function disableNormalizationMode(weekKey) {\n    91→    localStorage.removeItem(`normalization_${weekKey}`);\n    92→    updateNormalizationModeDisplay(weekKey);\n    93→    showSuccessMessage('正規化模式已停用');\n    94→}\n    95→\n    96→// 匯出時進行正規化計算\n    97→function performNormalizationForExport(entries) {\n    98→    let totalRegularHours = 0;\n    99→\n   100→    // 計算總正常工時\n   101→    entries.forEach(entry => {\n   102→        totalRegularHours += entry.regularHours || 0;\n   103→    });\n   104→\n   105→    if (totalRegularHours > 40) {\n   106→        const normalizedEntries = entries.map(entry => {\n   107→            const originalHours = entry.regularHours || 0;\n   108→            const ratio = 40 / totalRegularHours;\n   109→            const newRegularHours = Math.round(originalHours * ratio * 100) / 100;\n   110→            // 保存原始工時\n   111→            return {\n   112→                ...entry,\n   113→                _originalHours: originalHours,\n   114→                _isNormalized: true,\n   115→                regularHours: newRegularHours,\n   116→                ttlHours: newRegularHours + (entry.otHours || 0)\n   117→            };\n   118→        });\n   119→        return normalizedEntries;\n   120→    }\n   121→\n   122→    return entries; // 不需要正規化\n   123→}\n   124→// 格式化日期為 YYYY-MM-DD（本地時間）\n   125→function formatDate(date) {\n   126→    const y = date.getFullYear();\n   127→    const m = String(date.getMonth() + 1).padStart(2, '0');\n   128→    const d = String(date.getDate()).padStart(2, '0');\n   129→    return `${y}-${m}-${d}`;\n   130→}\n   131→\n   132→// 從localStorage加載所有工時表數據\n   133→function loadAllTimesheets() {\n   134→    const data = localStorage.getItem('timesheets');\n   135→    return data ? JSON.parse(data) : {};\n   136→}\n   137→\n   138→// 保存所有工時表數據到localStorage\n   139→function saveAllTimesheets(timesheets) {\n   140→    localStorage.setItem('timesheets', JSON.stringify(timesheets));\n   141→}\n   142→\n   143→// 獲取指定週數的日期範圍（週日到週六）\n   144→function getWeekDateRange(weekNumber, year) {\n   145→    // 簡單實現：假設year和weekNumber是有效的\n   146→    // 實際應根據ISO週數計算，這裡簡化為從當年第一週的週日開始推算\n   147→    // 注意：這只是一個示例，實際的日期計算需要更嚴謹的邏輯\n   148→    const firstDayOfYear = new Date(year, 0, 1);\n   149→    const firstSunday = new Date(firstDayOfYear);\n   150→    // 調整到第一週的週日（假設第一週從1月1日所在週的週日開始）\n   151→    firstSunday.setDate(firstDayOfYear.getDate() - firstDayOfYear.getDay());\n   152→    \n   153→    const startDate = new Date(firstSunday);\n   154→    startDate.setDate(firstSunday.getDate() + (weekNumber - 1) * 7);\n   155→    const endDate = new Date(startDate);\n   156→    endDate.setDate(startDate.getDate() + 6);\n   157→    \n   158→    return {\n   159→        start: startDate,\n   160→        end: endDate\n   161→    };\n   162→}\n   163→\n   164→// 計算填寫進度（根據記錄筆數和預期5個工作日？這裡簡化為記錄筆數是否大於0）\n   165→function calculateProgress(entries) {\n   166→    // 如果有記錄，則認為填寫了，進度100%；否則0\n   167→    return entries && entries.length > 0 ? 100 : 0;\n   168→}\n   169→\n   170→// 渲染工時表卡片\n   171→function renderTimesheetCards() {\n   172→    const container = document.getElementById('timesheet-cards');\n   173→    container.innerHTML = ''; // 清空容器\n   174→    \n   175→    const timesheets = loadAllTimesheets();\n   176→    \n   177→    Object.keys(timesheets).forEach(key => {\n   178→        // key格式：YYYY-Www，需檢查合法性\n   179→        if (!key || typeof key !== 'string' || !key.includes('-')) return;\n   180→        const [year, week] = key.split('-');\n   181→        if (!year || !week || week.length < 2) return;\n   182→        const weekNumber = parseInt(week.substring(1));\n   183→        if (isNaN(weekNumber)) return;\n   184→        const weekData = timesheets[key];\n   185→        \n   186→        // 處理新的資料結構（包含 basicInfo 和 entries）\n   187→        let entries = [];\n   188→        if (Array.isArray(weekData)) {\n   189→            // 舊的資料結構，直接是陣列\n   190→            entries = weekData;\n   191→        } else if (weekData && weekData.entries) {\n   192→            // 新的資料結構，有 basicInfo 和 entries\n   193→            entries = weekData.entries;\n   194→        }\n   195→        \n   196→        const dateRange = getWeekDateRange(weekNumber, year);\n   197→        const startStr = dateRange.start.toISOString().split('T')[0];\n   198→        const endStr = dateRange.end.toISOString().split('T')[0];\n   199→        \n   200→        const totalHours = entries.reduce((sum, entry) => sum + (entry.ttlHours || entry.TTL_Hours || 0), 0);\n   201→        const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n   202→        const totalOtHours = entries.reduce((sum, entry) => sum + (entry.otHours || 0), 0);\n   203→        const isComplete = totalHours >= 40;\n   204→        \n   205→        // 創建卡片元素\n   206→        const card = document.createElement('div');\n   207→        card.className = 'timesheet-card';\n   208→        card.innerHTML = `\n   209→            <div class=\"card-color-bar\"></div>\n   210→            <div class=\"status-tag ${isComplete ? 'status-completed' : 'status-inprogress'}\"\n   211→                 title=\"${isComplete ? '總工時已達40小時' : '總工時未達40小時'}\">\n   212→                ${isComplete ? '✓' : '⚠'}\n   213→            </div>\n   214→            <div class=\"card-header\">\n   215→                <div class=\"week-title\">${key}</div>\n   216→                <div class=\"date-range\">${startStr} 至 ${endStr}</div>\n   217→            </div>\n   218→            <div class=\"stats\">\n   219→                <div class=\"stat-item\">\n   220→                    <div class=\"stat-value\">${entries.length}</div>\n   221→                    <div class=\"stat-label\">記錄筆數</div>\n   222→                </div>\n   223→                <div class=\"stat-item\">\n   224→                    <div class=\"stat-value\">${totalHours}</div>\n   225→                    <div class=\"stat-label\">總工時</div>\n   226→                </div>\n   227→                <div class=\"stat-item\">\n   228→                    <div class=\"stat-value\">${totalRegularHours}</div>\n   229→                    <div class=\"stat-label\">總正常工時</div>\n   230→                </div>\n   231→                <div class=\"stat-item\">\n   232→                    <div class=\"stat-value\">${totalOtHours}</div>\n   233→                    <div class=\"stat-label\">總加班工時</div>\n   234→                </div>\n   235→            </div>\n   236→            <div class=\"card-actions\">\n   237→                <button class=\"btn-edit\" data-week=\"${key}\">修改</button>\n   238→                <button class=\"btn-copy\" data-week=\"${key}\">複製</button>\n   239→                <button class=\"btn-delete\" data-week=\"${key}\">刪除</button>\n   240→                <button class=\"btn-export\" data-week=\"${key}\">匯出</button>\n   241→            </div>\n   242→        `;\n   243→        \n   244→        container.appendChild(card);\n   245→    });\n   246→    \n   247→    // 為卡片上的按鈕添加事件監聽\n   248→    document.querySelectorAll('.btn-edit').forEach(btn => {\n   249→        btn.addEventListener('click', () => {\n   250→            const weekKey = btn.getAttribute('data-week');\n   251→            editTimesheet(weekKey);\n   252→        });\n   253→    });\n   254→    \n   255→    document.querySelectorAll('.btn-delete').forEach(btn => {\n   256→        btn.addEventListener('click', () => {\n   257→            const weekKey = btn.getAttribute('data-week');\n   258→            deleteTimesheet(weekKey);\n   259→        });\n   260→    });\n   261→    \n   262→    document.querySelectorAll('.btn-copy').forEach(btn => {\n   263→        btn.addEventListener('click', () => {\n   264→            const weekKey = btn.getAttribute('data-week');\n   265→console.log('Attempting to call showCopyOptionsModal with weekKey:', weekKey);\n   266→            showCopyOptionsModal(weekKey);\n   267→        });\n   268→    });\n   269→    \n   270→    document.querySelectorAll('.btn-export').forEach(btn => {\n   271→        btn.addEventListener('click', () => {\n   272→            const weekKey = btn.getAttribute('data-week');\n   273→            exportTimesheet(weekKey);\n   274→        });\n   275→    });\n   276→    \n   277→    // 更新上週按鈕顯示狀態\n   278→    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\n   279→        updateLastWeekButtonDisplay();\n   280→    }\n   281→}\n   282→\n   283→// 新建工時表 - 顯示週次選擇模態框\n   284→function newTimesheet() {\n   285→    showWeekSelectionModal();\n   286→}\n   287→\n   288→// 顯示週次選擇模態框\n   289→function showWeekSelectionModal() {\n   290→    const modal = document.getElementById('week-selection-modal');\n   291→    const timesheets = loadAllTimesheets();\n   292→    \n   293→    // 計算上週和本週的週次\n   294→    const lastWeekKey = getLastWeekKey();\n   295→    const thisWeekKey = getThisWeekKey();\n   296→    \n   297→    // 更新上週選項資訊\n   298→    const lastWeekInfo = document.getElementById('last-week-info');\n   299→    const lastWeekStatus = document.getElementById('last-week-status');\n   300→    const lastWeekOption = document.getElementById('option-last-week');\n   301→    \n   302→    if (lastWeekKey) {\n   303→        const lastWeekRange = getWeekDateRangeFromKey(lastWeekKey);\n   304→        lastWeekInfo.textContent = `${lastWeekKey} (${formatDate(lastWeekRange.start)} - ${formatDate(lastWeekRange.end)})`;\n   305→        \n   306→        if (timesheets[lastWeekKey]) {\n   307→            lastWeekStatus.textContent = '已存在';\n   308→            lastWeekStatus.className = 'option-status status-exists';\n   309→            // 如果已存在，禁用該選項\n   310→            document.getElementById('radio-last-week').disabled = true;\n   311→            lastWeekOption.style.opacity = '0.6';\n   312→        } else {\n   313→            lastWeekStatus.textContent = '可建立';\n   314→            lastWeekStatus.className = 'option-status status-new';\n   315→            document.getElementById('radio-last-week').disabled = false;\n   316→            lastWeekOption.style.opacity = '1';\n   317→        }\n   318→    } else {\n   319→        lastWeekOption.style.display = 'none';\n   320→    }\n   321→    \n   322→    // 更新本週選項資訊\n   323→    const thisWeekInfo = document.getElementById('this-week-info');\n   324→    const thisWeekStatus = document.getElementById('this-week-status');\n   325→    const thisWeekOption = document.getElementById('option-this-week');\n   326→    \n   327→    if (thisWeekKey) {\n   328→        const thisWeekRange = getWeekDateRangeFromKey(thisWeekKey);\n   329→        thisWeekInfo.textContent = `${thisWeekKey} (${formatDate(thisWeekRange.start)} - ${formatDate(thisWeekRange.end)})`;\n   330→        \n   331→        if (timesheets[thisWeekKey]) {\n   332→            thisWeekStatus.textContent = '已存在';\n   333→            thisWeekStatus.className = 'option-status status-exists';\n   334→            // 如果已存在，禁用該選項\n   335→            document.getElementById('radio-this-week').disabled = true;\n   336→            thisWeekOption.style.opacity = '0.6';\n   337→        } else {\n   338→            thisWeekStatus.textContent = '可建立';\n   339→            thisWeekStatus.className = 'option-status status-new';\n   340→            document.getElementById('radio-this-week').disabled = false;\n   341→            thisWeekOption.style.opacity = '1';\n   342→        }\n   343→    } else {\n   344→        thisWeekOption.style.display = 'none';\n   345→    }\n   346→    \n   347→    // 重置自訂輸入\n   348→    document.getElementById('custom-week-field').value = '';\n   349→    document.getElementById('custom-week-input').style.display = 'none';\n   350→    \n   351→    // 清除選擇\n   352→    document.querySelectorAll('input[name=\"weekOption\"]').forEach(radio => {\n   353→        radio.checked = false;\n   354→    });\n   355→    \n   356→    // 顯示模態框\n   357→    modal.style.display = 'block';\n   358→}\n   359→\n   360→// 取得上週的週次鍵值\n   361→function getLastWeekKey() {\n   362→    const today = new Date();\n   363→    const lastMonday = new Date(today);\n   364→    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n   365→    \n   366→    const year = lastMonday.getFullYear();\n   367→    const weekNumber = getWeekNumber(lastMonday);\n   368→    return `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n   369→}\n   370→\n   371→// 取得本週的週次鍵值\n   372→function getThisWeekKey() {\n   373→    const today = new Date();\n   374→    const thisMonday = new Date(today);\n   375→    thisMonday.setDate(today.getDate() - today.getDay() + 1);\n   376→    \n   377→    const year = thisMonday.getFullYear();\n   378→    const weekNumber = getWeekNumber(thisMonday);\n   379→    return `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n   380→}\n   381→\n   382→// 計算週數（ISO 8601）\n   383→/**\n   384→ * 以週日為週首計算週次（YYYY-Www），週日~週六\n   385→ */\n   386→function getWeekNumber(date) {\n   387→    const d = new Date(date);\n   388→    // 找到本週的週日\n   389→    const sunday = new Date(d);\n   390→    sunday.setDate(d.getDate() - d.getDay());\n   391→    // 計算今年第一天的週日\n   392→    const firstDay = new Date(d.getFullYear(), 0, 1);\n   393→    const firstSunday = new Date(firstDay);\n   394→    firstSunday.setDate(firstDay.getDate() - firstDay.getDay());\n   395→    // 計算週數\n   396→    const diff = sunday - firstSunday;\n   397→    const weekNumber = Math.floor(diff / (7 * 24 * 60 * 60 * 1000)) + 1;\n   398→    return weekNumber;\n   399→}\n   400→\n   401→// 從週次鍵值取得日期範圍\n   402→function getWeekDateRangeFromKey(weekKey) {\n   403→    const [year, week] = weekKey.split('-');\n   404→    const weekNumber = parseInt(week.substring(1));\n   405→    return getWeekDateRange(weekNumber, year);\n   406→}\n   407→\n   408→// 修改工時表（跳轉到編輯頁面）\n   409→function editTimesheet(weekKey) {\n   410→    // 跳轉到工時填寫界面\n   411→    window.location.href = `edit.html?week=${encodeURIComponent(weekKey)}`;\n   412→}\n   413→\n   414→// 刪除工時表\n   415→function deleteTimesheet(weekKey) {\n   416→    if (confirm(`確定要刪除 ${weekKey} 的工時表嗎？`)) {\n   417→        const timesheets = loadAllTimesheets();\n   418→        delete timesheets[weekKey];\n   419→        saveAllTimesheets(timesheets);\n   420→        renderTimesheetCards();\n   421→    }\n   422→}\n   423→\n   424→// 匯出工時表為CSV檔案\n   425→function exportTimesheet(weekKey) {\n   426→    try {\n   427→        const entries = getWeekEntries(weekKey);\n   428→        if (!entries || entries.length === 0) {\n   429→            alert('該週次沒有工時記錄可匯出');\n   430→            return;\n   431→        }\n   432→\n   433→        // 匯出前檢查總正常工時，若超過40小時則提示\n   434→        const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n   435→        // 若超過40小時，提示將自動正規化\n   436→        if (totalRegularHours > 40) {\n   437→            alert('本週正常工時超過40小時，滙出時將自動進行正規化計算。\\n\\n注意：若下載檔案時選擇覆蓋舊檔，且舊檔正在開啟狀態，下載可能會失敗並顯示「需要下載權限」等錯誤，請先關閉舊檔再下載。');\n   438→        }\n   439→\n   440→        let exportEntries = [...entries];\n   441→\n   442→        if (totalRegularHours > 40) {\n   443→            exportEntries = performNormalizationForExport(exportEntries);\n   444→        }\n   445→\n   446→        // 準備CSV內容\n   447→        const csvContent = generateCSVContent(exportEntries, weekKey);\n   448→\n   449→        // 創建並下載檔案\n   450→        downloadCSVFile(csvContent, `工時表_${weekKey}.csv`);\n   451→\n   452→        // 顯示成功訊息\n   453→        showSuccessMessage(`${weekKey} 工時表已匯出`);\n   454→\n   455→    } catch (error) {\n   456→        console.error('匯出失敗:', error);\n   457→        alert('匯出失敗，請檢查瀏覽器控制台');\n   458→    }\n   459→}\n   460→// 滙出未經正規化的原始工時\n   461→function exportRawTimesheet(weekKey) {\n   462→    try {\n   463→        const entries = getWeekEntries(weekKey);\n   464→        if (!entries || entries.length === 0) {\n   465→            alert('該週次沒有工時記錄可匯出');\n   466→            return;\n   467→        }\n   468→        // 直接滙出原始工時資料\n   469→        const csvContent = generateCSVContent(entries, weekKey);\n   470→        downloadCSVFile(csvContent, `工時表_${weekKey}_原始.csv`);\n   471→        showSuccessMessage(`${weekKey} 工時表（原始）已匯出`);\n   472→    } catch (error) {\n   473→        console.error('原始工時匯出失敗:', error);\n   474→        alert('原始工時匯出失敗，請檢查瀏覽器控制台');\n   475→    }\n   476→}\n   477→\n   478→// 生成CSV內容\n   479→function generateCSVContent(entries, weekKey) {\n   480→    // CSV標題行（按照指定格式）\n   481→    const headers = [\n   482→        'Name',\n   483→        'Zone',\n   484→        'Project',\n   485→        'Product Module',\n   486→        'Activity Type',\n   487→        'Task',\n   488→        'Regular Hours',\n   489→        'OT Hours',\n   490→        'TTL_Hours',\n   491→        'Date',\n   492→        'Start Date',\n   493→        'End Date',\n   494→        'Comments',\n   495→        'PM',\n   496→        'InternalOrOutsource'\n   497→    ];\n   498→\n   499→    // 載入基本資料\n   500→    const basicInfo = loadGlobalBasicInfo();\n   501→    \n   502→    // 轉換資料行\n   503→    const dataRows = entries.map(entry => {\n   504→        const regularHours = parseFloat(entry.regularHours) || 0;\n   505→        const overtimeHours = parseFloat(entry.overtimeHours) || parseFloat(entry.otHours) || 0;\n   506→        const totalHours = parseFloat(entry.ttlHours) || (regularHours + overtimeHours);\n   507→        \n   508→        return [\n   509→            basicInfo.employeeName || '',           // Name\n   510→            entry.zone || '',                       // Zone\n   511→            entry.project || '',                    // Project\n   512→            entry.productModule || '',              // Product Module\n   513→            entry.activityType || '',               // Activity Type\n   514→            entry.task || '',                       // Task\n   515→            regularHours,                           // Regular Hours\n   516→            overtimeHours,                          // OT Hours\n   517→            totalHours,                             // TTL_Hours\n   518→            entry.date || '',                       // Date\n   519→            entry.startDate || '',                  // Start Date\n   520→            entry.endDate || '',                    // End Date\n   521→            entry.comments || '',                   // Comments\n   522→            entry.pm || '',                         // PM\n   523→            basicInfo.employeeType || ''            // InternalOrOutsource\n   524→        ];\n   525→    });\n   526→\n   527→    // 組合CSV內容\n   528→    const csvRows = [headers, ...dataRows];\n   529→    \n   530→    // 轉換為CSV格式字串\n   531→    return csvRows.map(row =>\n   532→        row.map(field => {\n   533→            // 處理包含逗號或換行的欄位\n   534→            const fieldStr = String(field);\n   535→            if (fieldStr.includes(',') || fieldStr.includes('\\n') || fieldStr.includes('\"')) {\n   536→                return '\"' + fieldStr.replace(/\"/g, '\"\"') + '\"';\n   537→            }\n   538→            return fieldStr;\n   539→        }).join(',')\n   540→    ).join('\\n');\n   541→}\n   542→\n   543→// 下載CSV檔案\n   544→function downloadCSVFile(csvContent, filename) {\n   545→    try {\n   546→        console.log('[downloadCSVFile] 開始下載', { filename, csvContentSample: csvContent.slice(0, 100) });\n   547→        // 添加BOM以支援中文\n   548→        const BOM = '\\uFEFF';\n   549→        const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n   550→        console.log('[downloadCSVFile] Blob created', blob);\n   551→        const url = URL.createObjectURL(blob);\n   552→        console.log('[downloadCSVFile] Object URL', url);\n   553→        const link = document.createElement('a');\n   554→        link.setAttribute('href', url);\n   555→        link.setAttribute('download', filename);\n   556→        link.style.visibility = 'hidden';\n   557→        // 添加到頁面並觸發下載\n   558→        document.body.appendChild(link);\n   559→        link.click();\n   560→        console.log('[downloadCSVFile] link.click() 已觸發');\n   561→        // 清理\n   562→        document.body.removeChild(link);\n   563→        URL.revokeObjectURL(url);\n   564→        console.log('[downloadCSVFile] 清理完成');\n   565→    } catch (err) {\n   566→        console.error('[downloadCSVFile] 發生錯誤', err);\n   567→    }\n   568→}\n   569→\n   570→// 匯入工時表（暫時只提示）\n   571→function importTimesheet() {\n   572→    const input = document.getElementById('import-file');\n   573→    input.value = ''; // 重置 input，避免同檔案無法重選\n   574→    input.onchange = async function (event) {\n   575→        const file = event.target.files[0];\n   576→        if (!file) return;\n   577→        const reader = new FileReader();\n   578→        reader.onload = function (e) {\n   579→            const text = e.target.result;\n   580→            try {\n   581→                console.log('[import] 原始CSV內容:', text);\n   582→                \n   583→                // 檢查檔案是否為空\n   584→                if (!text || text.trim().length === 0) {\n   585→                    alert('檔案內容為空，請選擇有效的CSV檔案。');\n   586→                    return;\n   587→                }\n   588→                \n   589→                const data = parseCSV(text);\n   590→                console.log('[import] parseCSV result:', data);\n   591→                \n   592→                // 檢查是否成功解析出資料\n   593→                if (!data || data.length === 0) {\n   594→                    alert('無法從檔案中解析出有效資料，請檢查CSV格式是否正確。');\n   595→                    return;\n   596→                }\n   597→                \n   598→                // 強制將 data 轉為 array\n   599→                console.log('[import] typeof data:', typeof data, 'Array.isArray:', Array.isArray(data));\n   600→                let arr = [];\n   601→                if (Array.isArray(data)) {\n   602→                    arr = data;\n   603→                } else if (typeof data === 'object' && data !== null) {\n   604→                    arr = Object.values(data).flat();\n   605→                }\n   606→                console.log('[import] 轉換後 arr:', arr);\n   607→                \n   608→                if (arr.length === 0) {\n   609→                    alert('檔案中沒有有效的工時記錄。');\n   610→                    return;\n   611→                }\n   612→                let groupedData = {};\n   613→                const failedRows = [];\n   614→                \n   615→                arr.forEach((row, index) => {\n   616→                    if (!row) return;\n   617→                    \n   618→                    // 檢查日期欄位（支援多種可能的欄位名稱）\n   619→                    const dateValue = row.Date || row.date || row['日期'] || row.Day;\n   620→                    if (!dateValue) {\n   621→                        console.warn(`[import] 第${index + 1}筆記錄缺少日期欄位:`, row);\n   622→                        failedRows.push(`第${index + 1}筆記錄：缺少日期欄位`);\n   623→                        return;\n   624→                    }\n   625→                    \n   626→                    // 改進的日期解析，支援多種格式\n   627→                    let dateObj = null;\n   628→                    const dateStr = dateValue.toString().trim();\n   629→                    \n   630→                    // 嘗試多種日期格式\n   631→                    const dateFormats = [\n   632→                        dateStr, // 原始格式\n   633→                        dateStr.replace(/\\//g, '-'), // 將 / 替換為 -\n   634→                        dateStr.replace(/\\./g, '-'), // 將 . 替換為 -\n   635→                    ];\n   636→                    \n   637→                    for (const format of dateFormats) {\n   638→                        dateObj = new Date(format);\n   639→                        if (!isNaN(dateObj.getTime()) && dateObj.getFullYear() > 1900) {\n   640→                            break;\n   641→                        }\n   642→                        dateObj = null;\n   643→                    }\n   644→                    \n   645→                    if (!dateObj || isNaN(dateObj.getTime())) {\n   646→                        console.warn(`[import] 第${index + 1}筆記錄日期格式無效:`, dateValue);\n   647→                        failedRows.push(`第${index + 1}筆記錄：日期格式無效 \"${dateValue}\"`);\n   648→                        return;\n   649→                    }\n   650→                    \n   651→                    try {\n   652→                        // 正確計算週次\n   653→                        const year = dateObj.getFullYear();\n   654→                        const weekNumber = getWeekNumber(dateObj);\n   655→                        const weekKey = `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n   656→                        console.log('[import][分組] Date:', dateValue, 'parsed:', dateObj, 'year:', year, 'weekNumber:', weekNumber, 'weekKey:', weekKey);\n   657→                        \n   658→                        if (!groupedData[weekKey]) groupedData[weekKey] = [];\n   659→                        \n   660→                        // 標準化記錄格式，確保日期統一和必要欄位\n   661→                        const standardizedRow = { ...row };\n   662→                        standardizedRow.date = dateObj.toISOString().split('T')[0]; // YYYY-MM-DD 格式\n   663→                        \n   664→                        // 確保有唯一的 ID\n   665→                        if (!standardizedRow.id) {\n   666→                            standardizedRow.id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n   667→                        }\n   668→                        \n   669→                        // 確保數字欄位有預設值\n   670→                        standardizedRow.regularHours = standardizedRow.regularHours || 0;\n   671→                        standardizedRow.otHours = standardizedRow.otHours || 0;\n   672→                        standardizedRow.ttlHours = standardizedRow.ttlHours || (standardizedRow.regularHours + standardizedRow.otHours);\n   673→                        \n   674→                        groupedData[weekKey].push(standardizedRow);\n   675→                    } catch (err) {\n   676→                        console.error(`[import] 處理第${index + 1}筆記錄時發生錯誤:`, err, row);\n   677→                        failedRows.push(`第${index + 1}筆記錄：處理時發生錯誤`);\n   678→                    }\n   679→                });\n   680→                \n   681→                // 如果有失敗的記錄，顯示警告\n   682→                if (failedRows.length > 0) {\n   683→                    console.warn('[import] 以下記錄匯入失敗:', failedRows);\n   684→                    const proceed = confirm(`有 ${failedRows.length} 筆記錄匯入失敗：\\n${failedRows.slice(0, 5).join('\\n')}${failedRows.length > 5 ? '\\n...' : ''}\\n\\n是否繼續匯入其他記錄？`);\n   685→                    if (!proceed) {\n   686→                        alert('匯入已取消');\n   687→                        return;\n   688→                    }\n   689→                }\n   690→                console.log('[import] 自動分組週次結果:', groupedData);\n   691→                // 合併匯入資料到主 timesheets\n   692→                const timesheets = loadAllTimesheets();\n   693→                console.log('[import] localStorage timesheets(匯入前):', timesheets);\n   694→                const importedWeeks = [];\n   695→                for (const weekKey in groupedData) {\n   696→                    console.log('[import] 檢查週次', weekKey, groupedData[weekKey]);\n   697→                    if (timesheets[weekKey]) {\n   698→                        const overwrite = confirm('週次 ' + weekKey + ' 已有資料，是否覆蓋？');\n   699→                        console.log('[import] 覆蓋確認', weekKey, overwrite);\n   700→                        if (!overwrite) continue;\n   701→                    }\n   702→                    timesheets[weekKey] = groupedData[weekKey];\n   703→                    importedWeeks.push(weekKey);\n   704→                    console.log('[import] 已加入週次:', weekKey);\n   705→                }\n   706→                console.log('[import] importedWeeks:', importedWeeks);\n   707→                console.log('[import] localStorage timesheets(匯入後):', timesheets);\n   708→                \n   709→                if (Object.keys(groupedData).length === 0) {\n   710→                    alert('沒有有效的記錄可以匯入。請檢查CSV檔案中的日期格式和資料內容。');\n   711→                    return;\n   712→                }\n   713→                \n   714→                saveAllTimesheets(timesheets);\n   715→                renderTimesheetCards();\n   716→                \n   717→                if (importedWeeks.length > 0) {\n   718→                    const weekInfoList = importedWeeks.map(weekKey => {\n   719→                        try {\n   720→                            const range = getWeekDateRangeFromKey(weekKey);\n   721→                            const start = range.start.toISOString().split('T')[0];\n   722→                            const end = range.end.toISOString().split('T')[0];\n   723→                            const recordCount = groupedData[weekKey].length;\n   724→                            return `${weekKey} (${start} ~ ${end}) - ${recordCount}筆記錄`;\n   725→                        } catch (err) {\n   726→                            console.error('[import] 取得週次範圍失敗:', weekKey, err);\n   727→                            return `${weekKey} - ${groupedData[weekKey].length}筆記錄`;\n   728→                        }\n   729→                    });\n   730→                    \n   731→                    const totalRecords = importedWeeks.reduce((sum, weekKey) => sum + groupedData[weekKey].length, 0);\n   732→                    const successMessage = `匯入成功！\\n共匯入 ${totalRecords} 筆記錄到 ${importedWeeks.length} 個週次：\\n\\n${weekInfoList.join('\\n')}`;\n   733→                    \n   734→                    if (failedRows.length > 0) {\n   735→                        alert(successMessage + `\\n\\n注意：有 ${failedRows.length} 筆記錄匯入失敗。`);\n   736→                    } else {\n   737→                        alert(successMessage);\n   738→                    }\n   739→                } else {\n   740→                    alert('未匯入任何週次資料。所有記錄都被跳過了。');\n   741→                }\n   742→            } catch (err) {\n   743→                console.error('[import] 匯入流程發生錯誤:', err);\n   744→                let errorMessage = 'CSV 匯入失敗：\\n';\n   745→                if (err.message) {\n   746→                    errorMessage += err.message;\n   747→                } else {\n   748→                    errorMessage += '未知錯誤，請檢查瀏覽器控制台獲取更多資訊。';\n   749→                }\n   750→                alert(errorMessage);\n   751→            }\n   752→        };\n   753→        reader.readAsText(file, 'utf-8');\n   754→    };\n   755→    input.click();\n   756→}\n   757→\n   758→// ==================== 首頁模態框功能 ====================\n   759→\n   760→// 顯示基本資料設定模態框\n   761→function showBasicInfoModal() {\n   762→    const modal = document.getElementById('basic-info-modal');\n   763→    const basicInfo = loadGlobalBasicInfo();\n   764→    \n   765→    // 載入現有資料\n   766→    if (basicInfo) {\n   767→        document.getElementById('modal-employeeName').value = basicInfo.employeeName || '';\n   768→        document.getElementById('modal-employeeType').value = basicInfo.employeeType || '';\n   769→    }\n   770→    \n   771→    modal.style.display = 'block';\n   772→}\n   773→\n   774→// 隱藏基本資料設定模態框\n   775→function hideBasicInfoModal() {\n   776→    const modal = document.getElementById('basic-info-modal');\n   777→    modal.style.display = 'none';\n   778→    \n   779→    // 清空表單\n   780→    document.getElementById('modal-basic-info-form').reset();\n   781→}\n   782→\n   783→// 儲存模態框中的基本資料\n   784→function saveModalBasicInfo() {\n   785→    const employeeName = document.getElementById('modal-employeeName').value.trim();\n   786→    const employeeType = document.getElementById('modal-employeeType').value;\n   787→    \n   788→    if (!employeeName || !employeeType) {\n   789→        alert('請填寫所有必填欄位');\n   790→        return;\n   791→    }\n   792→    \n   793→    const basicInfo = {\n   794→        employeeName: employeeName,\n   795→        employeeType: employeeType\n   796→    };\n   797→    \n   798→    saveGlobalBasicInfo(basicInfo);\n   799→    hideBasicInfoModal();\n   800→    alert('基本資料已儲存成功！（全 App 共用）');\n   801→}\n   802→\n   803→// 初始化：頁面加載完成後渲染卡片，並綁定按鈕事件\n   804→document.addEventListener('DOMContentLoaded', () => {\n   805→    // 檢查是否為首頁\n   806→    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\n   807→        renderTimesheetCards();\n   808→        \n   809→        // 綁定全局按鈕事件\n   810→        document.getElementById('btn-basic-info').addEventListener('click', showBasicInfoModal);\n   811→        document.getElementById('btn-new').addEventListener('click', newTimesheet);\n   812→        document.getElementById('btn-import').addEventListener('click', importTimesheet);\n   813→        document.getElementById('btn-clear-storage').addEventListener('click', () => {\n   814→            if (confirm('確定要清空所有資料嗎？此操作無法還原。')) {\n   815→                localStorage.clear();\n   816→                renderTimesheetCards();\n   817→                alert('localStorage 已清空');\n   818→            }\n   819→        });\n   820→        \n   821→        // 綁定基本資料模態框事件\n   822→        document.getElementById('btn-save-modal-basic-info').addEventListener('click', saveModalBasicInfo);\n   823→        document.getElementById('btn-cancel-modal').addEventListener('click', hideBasicInfoModal);\n   824→        document.querySelector('.close').addEventListener('click', hideBasicInfoModal);\n   825→        \n   826→        // 綁定週次選擇模態框事件\n   827→        const weekModal = document.getElementById('week-selection-modal');\n   828→        if (weekModal) {\n   829→            const weekCloseBtn = weekModal.querySelector('.close');\n   830→            const confirmWeekBtn = document.getElementById('btn-confirm-week');\n   831→            const cancelWeekBtn = document.getElementById('btn-cancel-week');\n   832→            const customRadio = document.getElementById('radio-custom');\n   833→            const customInput = document.getElementById('custom-week-input');\n   834→            \n   835→            if (weekCloseBtn) weekCloseBtn.addEventListener('click', hideWeekSelectionModal);\n   836→            if (cancelWeekBtn) cancelWeekBtn.addEventListener('click', hideWeekSelectionModal);\n   837→            if (confirmWeekBtn) confirmWeekBtn.addEventListener('click', confirmWeekSelection);\n   838→            \n   839→            // 監聽自訂選項的選擇\n   840→            if (customRadio && customInput) {\n   841→                customRadio.addEventListener('change', function() {\n   842→                    if (this.checked) {\n   843→                        customInput.style.display = 'block';\n   844→                    }\n   845→                });\n   846→            }\n   847→            \n   848→            // 監聽其他選項的選擇（隱藏自訂輸入）\n   849→            document.querySelectorAll('input[name=\"weekOption\"]:not(#radio-custom)').forEach(radio => {\n   850→                radio.addEventListener('change', function() {\n   851→                    if (this.checked && customInput) {\n   852→                        customInput.style.display = 'none';\n   853→                    }\n   854→                });\n   855→            });\n   856→        }\n   857→        \n   858→        // 點擊模態框外部關閉\n   859→        window.addEventListener('click', (event) => {\n   860→            const basicModal = document.getElementById('basic-info-modal');\n   861→            const weekSelectionModal = document.getElementById('week-selection-modal');\n   862→            \n   863→            if (event.target === basicModal) {\n   864→                hideBasicInfoModal();\n   865→            } else if (event.target === weekSelectionModal) {\n   866→                hideWeekSelectionModal();\n   867→            }\n   868→        });\n   869→\n   870→        // 設置上週按鈕的文字和顯示狀態\n   871→        const lastWeekButton = document.getElementById('btn-last-week');\n   872→        if (lastWeekButton) {\n   873→            updateLastWeekButtonDisplay();\n   874→            // 綁定點擊事件\n   875→            lastWeekButton.addEventListener('click', createLastWeekTimesheet);\n   876→        }\n   877→    }\n   878→});\n   879→\n   880→// 更新上週按鈕顯示狀態和文字\n   881→function updateLastWeekButtonDisplay() {\n   882→    const today = new Date();\n   883→    // 更精確的計算：獲取上週一（今天減去今天星期幾再減6天）\n   884→    const lastMonday = new Date(today);\n   885→    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n   886→    const lastSunday = new Date(lastMonday);\n   887→    lastSunday.setDate(lastMonday.getDate() + 6);\n   888→    \n   889→    const button = document.getElementById('btn-last-week');\n   890→    const container = document.getElementById('last-week-container');\n   891→    \n   892→    if (button && container) {\n   893→        // 檢查上週是否已存在\n   894→        const lastWeekKey = getLastWeekKey();\n   895→        const timesheets = loadAllTimesheets();\n   896→        \n   897→        if (timesheets[lastWeekKey]) {\n   898→            // 上週已存在，隱藏按鈕\n   899→            container.style.display = 'none';\n   900→        } else {\n   901→            // 上週不存在，顯示按鈕並設置文字\n   902→            container.style.display = 'block';\n   903→            button.textContent = `建立上週工時表 (${formatDate(lastMonday)} - ${formatDate(lastSunday)})`;\n   904→        }\n   905→    }\n   906→}\n   907→\n   908→// 建立上週工時表\n   909→function createLastWeekTimesheet() {\n   910→    const today = new Date();\n   911→    const lastMonday = new Date(today);\n   912→    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n   913→    const lastSunday = new Date(lastMonday);\n   914→    lastSunday.setDate(lastMonday.getDate() + 6);\n   915→    \n   916→    // 生成週次格式 YYYY-Www\n   917→    const year = lastMonday.getFullYear();\n   918→    const weekNumber = Math.ceil((((lastMonday - new Date(year, 0, 1)) / 86400000) + new Date(year, 0, 1).getDay() + 1) / 7);\n   919→    const weekKey = `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n   920→    \n   921→    const timesheets = loadAllTimesheets();\n   922→    if (!timesheets[weekKey]) {\n   923→        timesheets[weekKey] = [];\n   924→        saveAllTimesheets(timesheets);\n   925→    }\n   926→    \n   927→    // 載入上週工時表\n   928→    editTimesheet(weekKey);\n   929→    renderTimesheetCards();\n   930→}\n   931→\n   932→// ==================== 編輯頁面功能 ====================\n   933→\n   934→// 生成唯一 ID\n   935→function generateUniqueId() {\n   936→    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n   937→}\n   938→\n   939→// 獲取當前編輯的週次\n   940→function getCurrentWeekKey() {\n   941→    const urlParams = new URLSearchParams(window.location.search);\n   942→    return urlParams.get('week');\n   943→}\n   944→\n   945→// ==================== 全域基本資料管理 ====================\n   946→\n   947→// 載入全域基本資料\n   948→function loadGlobalBasicInfo() {\n   949→    const data = localStorage.getItem('globalBasicInfo');\n   950→    return data ? JSON.parse(data) : null;\n   951→}\n   952→\n   953→// 儲存全域基本資料\n   954→function saveGlobalBasicInfo(basicInfo) {\n   955→    localStorage.setItem('globalBasicInfo', JSON.stringify(basicInfo));\n   956→}\n   957→\n   958→// ==================== 工時記錄管理 ====================\n   959→\n   960→// 獲取指定週次的工時記錄\n   961→function getWeekEntries(weekKey) {\n   962→    const timesheets = loadAllTimesheets();\n   963→    const weekData = timesheets[weekKey];\n   964→    \n   965→    // 處理不同的資料結構\n   966→    if (Array.isArray(weekData)) {\n   967→        // 舊的資料結構，直接是陣列\n   968→        return weekData;\n   969→    } else if (weekData && weekData.entries) {\n   970→        // 新的資料結構，有 entries\n   971→        return weekData.entries;\n   972→    }\n   973→    \n   974→    return [];\n   975→}\n   976→\n   977→// 儲存指定週次的工時記錄\n   978→function saveWeekEntries(weekKey, entries) {\n   979→    const timesheets = loadAllTimesheets();\n   980→    timesheets[weekKey] = entries; // 直接儲存為陣列，簡化結構\n   981→    saveAllTimesheets(timesheets);\n   982→}\n   983→\n   984→// 計算總工時\n   985→function calculateTotalHours() {\n   986→    const regular = parseFloat(document.getElementById('regularHours').value) || 0;\n   987→    const ot = parseFloat(document.getElementById('otHours').value) || 0;\n   988→    document.getElementById('ttlHours').value = regular + ot;\n   989→}\n   990→\n   991→// 驗證基本資料表單\n   992→function validateBasicInfo() {\n   993→    const requiredFields = ['employeeName', 'employeeType'];\n   994→    let isValid = true;\n   995→    \n   996→    // 清除之前的錯誤狀態\n   997→    document.querySelectorAll('#basic-info-form .form-field.error').forEach(field => {\n   998→        field.classList.remove('error');\n   999→    });\n  1000→    \n  1001→    requiredFields.forEach(fieldName => {\n  1002→        const field = document.getElementById(fieldName);\n  1003→        const formField = field.closest('.form-field');\n  1004→        \n  1005→        if (!field.value.trim()) {\n  1006→            formField.classList.add('error');\n  1007→            showFieldError(formField, '此欄位為必填');\n  1008→            isValid = false;\n  1009→        }\n  1010→    });\n  1011→    \n  1012→    return isValid;\n  1013→}\n  1014→\n  1015→// 驗證工時記錄表單\n  1016→function validateForm() {\n  1017→    const requiredFields = ['task', 'zone', 'project', 'activityType', 'regularHours', 'date'];\n  1018→    let isValid = true;\n  1019→    \n  1020→    // 檢查是否已儲存全域基本資料\n  1021→    const basicInfo = loadGlobalBasicInfo();\n  1022→    if (!basicInfo) {\n  1023→        alert('請先填寫並儲存基本資料');\n  1024→        document.querySelector('.basic-info-container').scrollIntoView({ behavior: 'smooth' });\n  1025→        return false;\n  1026→    }\n  1027→    \n  1028→    // 清除之前的錯誤狀態\n  1029→    document.querySelectorAll('#timesheet-form .form-field.error').forEach(field => {\n  1030→        field.classList.remove('error');\n  1031→    });\n  1032→    \n  1033→    requiredFields.forEach(fieldName => {\n  1034→        const field = document.getElementById(fieldName);\n  1035→        const formField = field.closest('.form-field');\n  1036→        \n  1037→        if (!field.value.trim()) {\n  1038→            formField.classList.add('error');\n  1039→            showFieldError(formField, '此欄位為必填');\n  1040→            isValid = false;\n  1041→        }\n  1042→    });\n  1043→    \n  1044→    // 驗證工時範圍\n  1045→    const regularHours = parseFloat(document.getElementById('regularHours').value);\n  1046→    const otHours = parseFloat(document.getElementById('otHours').value) || 0;\n  1047→    \n  1048→    if (regularHours < 0 || regularHours > 24) {\n  1049→        const formField = document.getElementById('regularHours').closest('.form-field');\n  1050→        formField.classList.add('error');\n  1051→        showFieldError(formField, '正常工時必須在 0-24 小時之間');\n  1052→        isValid = false;\n  1053→    }\n  1054→    \n  1055→    if (otHours < 0 || otHours > 24) {\n  1056→        const formField = document.getElementById('otHours').closest('.form-field');\n  1057→        formField.classList.add('error');\n  1058→        showFieldError(formField, '加班工時必須在 0-24 小時之間');\n  1059→        isValid = false;\n  1060→    }\n  1061→    \n  1062→    // 允許正常工時總計超過40小時，僅於匯出時提示正規化\n  1063→    const weekKey = getCurrentWeekKey();\n  1064→    const currentEntryId = document.getElementById('entryId').value;\n  1065→    const entries = getWeekEntries(weekKey);\n  1066→    \n  1067→    // 計算除了當前編輯記錄外的其他記錄的正常工時總和\n  1068→    let totalRegularHours = 0;\n  1069→    entries.forEach(entry => {\n  1070→        if (entry.id !== currentEntryId) {\n  1071→            totalRegularHours += entry.regularHours || 0;\n  1072→        }\n  1073→    });\n  1074→    \n  1075→    // 加上當前輸入的正常工時\n  1076→    totalRegularHours += regularHours;\n  1077→    \n  1078→    // 不再於此處限制或提示，僅於匯出時處理正規化\n  1079→    \n  1080→    // 驗證日期邏輯\n  1081→    const startDate = document.getElementById('startDate').value;\n  1082→    const endDate = document.getElementById('endDate').value;\n  1083→    const date = document.getElementById('date').value;\n  1084→    \n  1085→    // 獲取當前週的日期範圍（使用已宣告的 weekKey）\n  1086→    const [year, week] = weekKey.split('-');\n  1087→    const weekNumber = parseInt(week.substring(1));\n  1088→    const weekRange = getWeekDateRange(weekNumber, year);\n  1089→    \n  1090→    // 驗證主要日期是否在週範圍內\n  1091→    if (date && !validateDateInWeekRange(date, weekRange.start, weekRange.end)) {\n  1092→        const formField = document.getElementById('date').closest('.form-field');\n  1093→        formField.classList.add('error');\n  1094→        showFieldError(formField, `日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n  1095→        isValid = false;\n  1096→    }\n  1097→    \n  1098→    // 驗證開始日期是否在週範圍內\n  1099→    if (startDate && !validateDateInWeekRange(startDate, weekRange.start, weekRange.end)) {\n  1100→        const formField = document.getElementById('startDate').closest('.form-field');\n  1101→        formField.classList.add('error');\n  1102→        showFieldError(formField, `開始日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n  1103→        isValid = false;\n  1104→    }\n  1105→    \n  1106→    // 驗證結束日期是否在週範圍內\n  1107→    if (endDate && !validateDateInWeekRange(endDate, weekRange.start, weekRange.end)) {\n  1108→        const formField = document.getElementById('endDate').closest('.form-field');\n  1109→        formField.classList.add('error');\n  1110→        showFieldError(formField, `結束日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n  1111→        isValid = false;\n  1112→    }\n  1113→    \n  1114→    // 驗證開始日期不能晚於結束日期\n  1115→    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {\n  1116→        const formField = document.getElementById('endDate').closest('.form-field');\n  1117→        formField.classList.add('error');\n  1118→        showFieldError(formField, '結束日期不能早於開始日期');\n  1119→        isValid = false;\n  1120→    }\n  1121→    \n  1122→    return isValid;\n  1123→}\n  1124→\n  1125→// 顯示欄位錯誤訊息\n  1126→function showFieldError(formField, message) {\n  1127→    let errorDiv = formField.querySelector('.error-message');\n  1128→    if (!errorDiv) {\n  1129→        errorDiv = document.createElement('div');\n  1130→        errorDiv.className = 'error-message';\n  1131→        formField.appendChild(errorDiv);\n  1132→    }\n  1133→    errorDiv.textContent = message;\n  1134→}\n  1135→\n  1136→// 清空表單\n  1137→function clearForm() {\n  1138→    document.getElementById('timesheet-form').reset();\n  1139→    document.getElementById('entryId').value = '';\n  1140→    document.getElementById('ttlHours').value = '';\n  1141→    \n  1142→    // 清除錯誤狀態\n  1143→    document.querySelectorAll('.form-field.error').forEach(field => {\n  1144→        field.classList.remove('error');\n  1145→    });\n  1146→}\n  1147→\n  1148→// 獲取基本資料\n  1149→function getBasicInfoData() {\n  1150→    return {\n  1151→        employeeName: document.getElementById('employeeName').value.trim(),\n  1152→        employeeType: document.getElementById('employeeType').value\n  1153→    };\n  1154→}\n  1155→\n  1156→// 填充基本資料\n  1157→function fillBasicInfo(basicInfo) {\n  1158→    if (basicInfo) {\n  1159→        document.getElementById('employeeName').value = basicInfo.employeeName || '';\n  1160→        document.getElementById('employeeType').value = basicInfo.employeeType || '';\n  1161→    }\n  1162→}\n  1163→\n  1164→// 從表單獲取工時記錄數據\n  1165→function getFormData() {\n  1166→    const basicInfo = loadGlobalBasicInfo();\n  1167→    const originalHours = document.getElementById('originalHours').value;\n  1168→    \n  1169→    const data = {\n  1170→        id: document.getElementById('entryId').value || generateUniqueId(),\n  1171→        // 從全域基本資料引用\n  1172→        name: basicInfo ? basicInfo.employeeName : '',\n  1173→        internalOrOutsource: basicInfo ? basicInfo.employeeType : '',\n  1174→        // 工時記錄特定欄位\n  1175→        zone: document.getElementById('zone').value,\n  1176→        project: document.getElementById('project').value.trim(),\n  1177→        productModule: document.getElementById('productModule').value.trim(),\n  1178→        activityType: document.getElementById('activityType').value,\n  1179→        task: document.getElementById('task').value.trim(),\n  1180→        regularHours: parseFloat(document.getElementById('regularHours').value) || 0,\n  1181→        otHours: parseFloat(document.getElementById('otHours').value) || 0,\n  1182→        ttlHours: parseFloat(document.getElementById('ttlHours').value) || 0,\n  1183→        date: document.getElementById('date').value,\n  1184→        startDate: document.getElementById('startDate').value,\n  1185→        endDate: document.getElementById('endDate').value,\n  1186→        comments: document.getElementById('comments').value.trim(),\n  1187→        pm: document.getElementById('pm').value.trim()\n  1188→    };\n  1189→    \n  1190→    // 如果有原始工時（正規化模式），則儲存但標記為內部使用\n  1191→    if (originalHours && parseFloat(originalHours) > 0) {\n  1192→        data._originalHours = parseFloat(originalHours); // 使用 _ 前綴標記為內部欄位\n  1193→        data._isNormalized = true;\n  1194→    }\n  1195→    \n  1196→    return data;\n  1197→}\n  1198→\n  1199→// 填充工時記錄表單數據\n  1200→function fillForm(entry) {\n  1201→    document.getElementById('entryId').value = entry.id;\n  1202→    document.getElementById('zone').value = entry.zone || '';\n  1203→    document.getElementById('project').value = entry.project || '';\n  1204→    document.getElementById('productModule').value = entry.productModule || '';\n  1205→    document.getElementById('activityType').value = entry.activityType || '';\n  1206→    document.getElementById('task').value = entry.task || '';\n  1207→    document.getElementById('regularHours').value = entry.regularHours || '';\n  1208→    document.getElementById('otHours').value = entry.otHours || 0;\n  1209→    document.getElementById('ttlHours').value = entry.ttlHours || '';\n  1210→    document.getElementById('date').value = entry.date || '';\n  1211→    document.getElementById('startDate').value = entry.startDate || '';\n  1212→    document.getElementById('endDate').value = entry.endDate || '';\n  1213→    document.getElementById('comments').value = entry.comments || '';\n  1214→    document.getElementById('pm').value = entry.pm || '';\n  1215→    \n  1216→    // 處理原始工時欄位（正規化模式）\n  1217→    const originalHoursField = document.getElementById('originalHoursField');\n  1218→    if (entry._originalHours && entry._isNormalized) {\n  1219→        document.getElementById('originalHours').value = entry._originalHours;\n  1220→        originalHoursField.style.display = 'block';\n  1221→    } else {\n  1222→        document.getElementById('originalHours').value = '';\n  1223→        originalHoursField.style.display = 'none';\n  1224→    }\n  1225→}\n  1226→\n  1227→// 儲存基本資料\n  1228→function saveBasicInfo() {\n  1229→    if (!validateBasicInfo()) {\n  1230→        return;\n  1231→    }\n  1232→    \n  1233→    const basicInfoData = getBasicInfoData();\n  1234→    saveGlobalBasicInfo(basicInfoData);\n  1235→    \n  1236→    // 更新 UI 狀態\n  1237→    const container = document.querySelector('.basic-info-container');\n  1238→    container.classList.add('basic-info-saved');\n  1239→    \n  1240→    showSuccessMessage('基本資料已儲存成功！（全 App 共用）');\n  1241→}\n  1242→\n  1243→// 儲存工時記錄\n  1244→function saveEntry() {\n  1245→    if (!validateForm()) {\n  1246→        return;\n  1247→    }\n  1248→    \n  1249→    const weekKey = getCurrentWeekKey();\n  1250→    if (!weekKey) {\n  1251→        alert('無效的週次參數');\n  1252→        return;\n  1253→    }\n  1254→    \n  1255→    const formData = getFormData();\n  1256→    const entries = getWeekEntries(weekKey);\n  1257→    \n  1258→    // 檢查是否為新增或編輯\n  1259→    const existingIndex = entries.findIndex(entry => entry.id === formData.id);\n  1260→    \n  1261→    if (existingIndex !== -1) {\n  1262→        // 編輯現有記錄\n  1263→        entries[existingIndex] = formData;\n  1264→    } else {\n  1265→        // 新增記錄\n  1266→        entries.push(formData);\n  1267→    }\n  1268→    \n  1269→    saveWeekEntries(weekKey, entries);\n  1270→    renderEntriesList();\n  1271→    clearForm();\n  1272→    showSuccessMessage('工時記錄已儲存成功！');\n  1273→}\n  1274→\n  1275→// 編輯工時記錄\n  1276→function editEntry(entryId) {\n  1277→    const weekKey = getCurrentWeekKey();\n  1278→    const entries = getWeekEntries(weekKey);\n  1279→    const entry = entries.find(e => e.id === entryId);\n  1280→    \n  1281→    if (entry) {\n  1282→        fillForm(entry);\n  1283→        // 滾動到表單頂部\n  1284→        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n  1285→    }\n  1286→}\n  1287→\n  1288→// 複製工時記錄\n  1289→function copyEntry(entryId) {\n  1290→    const weekKey = getCurrentWeekKey();\n  1291→    const entries = getWeekEntries(weekKey);\n  1292→    const entry = entries.find(e => e.id === entryId);\n  1293→    \n  1294→    if (entry) {\n  1295→        // 獲取當週日期範圍\n  1296→        const [year, week] = weekKey.split('-');\n  1297→        const weekNumber = parseInt(week.substring(1));\n  1298→        const weekRange = getWeekDateRange(weekNumber, year);\n  1299→        \n  1300→        // 複製記錄資料並更新日期\n  1301→        const copiedEntry = { ...entry, id: generateUniqueId() };\n  1302→        \n  1303→        // 更新日期（如果是單日記錄）\n  1304→        if (copiedEntry.date) {\n  1305→            const originalDate = new Date(copiedEntry.date);\n  1306→            const nextDate = new Date(originalDate);\n  1307→            nextDate.setDate(originalDate.getDate() + 1);\n  1308→            \n  1309→            // 檢查是否超過週範圍\n  1310→            if (nextDate <= weekRange.end) {\n  1311→                copiedEntry.date = formatDate(nextDate);\n  1312→            } else {\n  1313→                // 如果是週最後一天，則重置為週第一天\n  1314→                copiedEntry.date = formatDate(weekRange.start);\n  1315→            }\n  1316→        }\n  1317→        \n  1318→        fillForm(copiedEntry);\n  1319→        // 滾動到表單頂部\n  1320→        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n  1321→        showSuccessMessage('工時記錄已複製，日期已自動調整');\n  1322→    }\n  1323→}\n  1324→\n  1325→// 刪除工時記錄\n  1326→function deleteEntry(entryId) {\n  1327→    if (!confirm('確定要刪除這筆工時記錄嗎？')) {\n  1328→        return;\n  1329→    }\n  1330→    \n  1331→    const weekKey = getCurrentWeekKey();\n  1332→    const entries = getWeekEntries(weekKey);\n  1333→    const filteredEntries = entries.filter(entry => entry.id !== entryId);\n  1334→    \n  1335→    saveWeekEntries(weekKey, filteredEntries);\n  1336→    renderEntriesList();\n  1337→    showSuccessMessage('工時記錄已刪除！');\n  1338→}\n  1339→\n  1340→// 渲染工時記錄列表\n  1341→function renderEntriesList() {\n  1342→    const weekKey = getCurrentWeekKey();\n  1343→    const entries = getWeekEntries(weekKey);\n  1344→    const tbody = document.getElementById('entries-tbody');\n  1345→    \n  1346→    if (!tbody) return;\n  1347→    \n  1348→    tbody.innerHTML = '';\n  1349→    \n  1350→    let totalHours = 0;\n  1351→    \n  1352→    entries.forEach(entry => {\n  1353→        totalHours += entry.ttlHours || 0;\n  1354→        \n  1355→        const row = document.createElement('tr');\n  1356→        row.innerHTML = `\n  1357→            <td>${entry.date || '-'}</td>\n  1358→            <td>${entry.zone || '-'}</td>\n  1359→            <td>${entry.activityType || '-'}</td>\n  1360→            <td>${entry.task || '-'}</td>\n  1361→            <td>${entry.regularHours || 0}</td>\n  1362→            <td>${entry.otHours || 0}</td>\n  1363→            <td><strong>${entry.ttlHours || 0}</strong></td>\n  1364→            <td class=\"entry-actions\">\n  1365→                <button class=\"btn-edit-entry\" onclick=\"editEntry('${entry.id}')\">編輯</button>\n  1366→                <button class=\"btn-copy-entry\" onclick=\"copyEntry('${entry.id}')\">複製</button>\n  1367→                <button class=\"btn-delete-entry\" onclick=\"deleteEntry('${entry.id}')\">刪除</button>\n  1368→            </td>\n  1369→        `;\n  1370→        tbody.appendChild(row);\n  1371→    });\n  1372→    \n  1373→    \n  1374→    alert('成功複製 ' + copiedEntries.length + ' 筆工時記錄到目標週！\\n\\n來源週：' + sourceWeekKey + '\\n目標週：' + targetWeekKey + '\\n日期範圍：' + startDate + ' ~ ' + endDate + '\\n\\n所有日期已自動調整為目標週對應日期。');\n  1375→}\n  1376→\n  1377→// 顯示成功訊息\n  1378→function showSuccessMessage(message) {\n  1379→    // 創建或更新成功訊息元素\n  1380→    let successDiv = document.querySelector('.success-message');\n  1381→    if (!successDiv) {\n  1382→        successDiv = document.createElement('div');\n  1383→        successDiv.className = 'success-message';\n  1384→        document.querySelector('.form-container').insertBefore(successDiv, document.querySelector('.form-container').firstChild);\n  1385→    }\n  1386→    \n  1387→    successDiv.textContent = message;\n  1388→    successDiv.style.display = 'block';\n  1389→    \n  1390→    // 3秒後自動隱藏\n  1391→    setTimeout(() => {\n  1392→        successDiv.style.display = 'none';\n  1393→    }, 3000);\n  1394→}\n  1395→\n  1396→// 初始化編輯頁面\n  1397→async function initEditPage() {\n  1398→    const weekKey = getCurrentWeekKey();\n  1399→    if (!weekKey) {\n  1400→        alert('無效的週次參數');\n  1401→        window.location.href = 'index.html';\n  1402→        return;\n  1403→    }\n  1404→    \n  1405→    // 載入 CSV 資料\n  1406→    await loadAllCSVData();\n  1407→    \n  1408→    // 設置週次標題和日期範圍\n  1409→    document.getElementById('week-title').textContent = weekKey;\n  1410→    \n  1411→    // 計算並顯示日期範圍\n  1412→    const [year, week] = weekKey.split('-');\n  1413→    const weekNumber = parseInt(week.substring(1));\n  1414→    const dateRange = getWeekDateRange(weekNumber, year);\n  1415→    const entries = getWeekEntries(weekKey) || [];\n  1416→    const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n  1417→    const totalOtHours = entries.reduce((sum, entry) => sum + (entry.otHours || 0), 0);\n  1418→    const totalHours = entries.reduce((sum, entry) => sum + (entry.ttlHours || entry.TTL_Hours || 0), 0);\n  1419→\n  1420→    // 將統計資訊加在日期區塊同一行\n  1421→    const dateRangeDiv = document.getElementById('date-range');\n  1422→    dateRangeDiv.innerHTML =\n  1423→        `${formatDate(dateRange.start)} 至 ${formatDate(dateRange.end)}\n  1424→        <span style=\"color:#444;font-size:1em;\">\n  1425→        總正常工時：${totalRegularHours}\n  1426→        總加班工時：${totalOtHours}\n  1427→        總工時：${totalHours}\n  1428→        </span>`;\n  1429→    // 設置日期欄位的限制範圍\n  1430→    setDateFieldLimits(dateRange.start, dateRange.end);\n  1431→    \n  1432→    // (已移除正規化模式狀態顯示)\n  1433→ \n  1434→    // 載入並顯示全域基本資料\n  1435→    const basicInfo = loadGlobalBasicInfo();\n  1436→    if (basicInfo) {\n  1437→        fillBasicInfo(basicInfo);\n  1438→        document.querySelector('.basic-info-container').classList.add('basic-info-saved');\n  1439→    }\n  1440→    \n  1441→    // 綁定基本資料表單事件\n  1442→    document.getElementById('btn-save-basic-info').addEventListener('click', saveBasicInfo);\n  1443→    \n  1444→    // 綁定工時記錄表單事件\n  1445→    document.getElementById('regularHours').addEventListener('input', calculateTotalHours);\n  1446→    document.getElementById('otHours').addEventListener('input', calculateTotalHours);\n  1447→    \n  1448→    // 綁定按鈕事件\n  1449→    document.getElementById('btn-save-entry').addEventListener('click', saveEntry);\n  1450→    document.getElementById('btn-cancel-entry').addEventListener('click', clearForm);\n  1451→    document.getElementById('btn-clear-form').addEventListener('click', clearForm);\n  1452→    document.getElementById('btn-back').addEventListener('click', () => {\n  1453→        window.location.href = 'index.html';\n  1454→    });\n  1455→    \n  1456→    // 綁定新增記錄按鈕\n  1457→    document.getElementById('btn-add-entry').addEventListener('click', () => {\n  1458→        clearForm();\n  1459→        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n  1460→    });\n  1461→    \n  1462→    \n  1463→    // 渲染工時記錄列表\n  1464→    renderEntriesList();\n  1465→}\n  1466→\n  1467→// 檢查是否為編輯頁面並初始化\n  1468→if (window.location.pathname.includes('edit.html')) {\n  1469→    document.addEventListener('DOMContentLoaded', initEditPage);\n  1470→}\n  1471→// 隱藏週次選擇模態框\n  1472→function hideWeekSelectionModal() {\n  1473→    const modal = document.getElementById('week-selection-modal');\n  1474→    modal.style.display = 'none';\n  1475→}\n  1476→\n  1477→// 確認週次選擇並建立工時表\n  1478→function confirmWeekSelection() {\n  1479→    const selectedOption = document.querySelector('input[name=\"weekOption\"]:checked');\n  1480→    \n  1481→    if (!selectedOption) {\n  1482→        alert('請選擇一個週次選項');\n  1483→        return;\n  1484→    }\n  1485→    \n  1486→    let weekKey = '';\n  1487→    \n  1488→    switch (selectedOption.value) {\n  1489→        case 'last':\n  1490→            weekKey = getLastWeekKey();\n  1491→            break;\n  1492→        case 'this':\n  1493→            weekKey = getThisWeekKey();\n  1494→            break;\n  1495→        case 'custom':\n  1496→            const customWeek = document.getElementById('custom-week-field').value.trim();\n  1497→            if (!customWeek) {\n  1498→                alert('請輸入自訂週次');\n  1499→                return;\n  1500→            }\n  1501→            \n  1502→            // 驗證格式\n  1503→            if (!/^\\d{4}-W\\d{2}$/.test(customWeek)) {\n  1504→                alert('週次格式不正確，請使用YYYY-Www格式（例如2024-W25）');\n  1505→                return;\n  1506→            }\n  1507→            \n  1508→            weekKey = customWeek;\n  1509→            break;\n  1510→        default:\n  1511→            alert('無效的選項');\n  1512→            return;\n  1513→    }\n  1514→    \n  1515→    if (!weekKey) {\n  1516→        alert('無法取得週次資訊');\n  1517→        return;\n  1518→    }\n  1519→    \n  1520→    // 檢查是否已存在\n  1521→    const timesheets = loadAllTimesheets();\n  1522→    if (timesheets[weekKey]) {\n  1523→        alert(`週次 ${weekKey} 已存在`);\n  1524→        return;\n  1525→    }\n  1526→    \n  1527→    // 創建新的工時表\n  1528→    timesheets[weekKey] = [];\n  1529→    saveAllTimesheets(timesheets);\n  1530→    \n  1531→    // 隱藏模態框\n  1532→    hideWeekSelectionModal();\n  1533→    \n  1534→    // 重新渲染卡片\n  1535→    renderTimesheetCards();\n  1536→    \n  1537→    // 顯示成功訊息\n  1538→    showSuccessMessage(`成功建立週次 ${weekKey} 的工時表`);\n  1539→}\n  1540→\n  1541→// 顯示成功訊息\n  1542→function showSuccessMessage(message) {\n  1543→    // 創建成功訊息元素\n  1544→    const successDiv = document.createElement('div');\n  1545→    successDiv.className = 'success-message';\n  1546→    successDiv.innerHTML = `\n  1547→        <div class=\"success-content\">\n  1548→            <span class=\"success-icon\">✓</span>\n  1549→            <span class=\"success-text\">${message}</span>\n  1550→        </div>\n  1551→    `;\n  1552→    \n  1553→    // 添加到頁面\n  1554→    document.body.appendChild(successDiv);\n  1555→    \n  1556→    // 3秒後自動移除\n  1557→    setTimeout(() => {\n  1558→        if (successDiv.parentNode) {\n  1559→            successDiv.parentNode.removeChild(successDiv);\n  1560→        }\n  1561→    }, 3000);\n  1562→}"}]},"uuid":"e2a0a272-0413-4c78-aff7-55c84dea3181","timestamp":"2025-06-20T07:15:52.987Z","toolUseResult":{"type":"text","file":{"filePath":"/home/yanggf/a/timesheet/app.js","content":"import { loadAllTimesheets, saveAllTimesheets, loadGlobalBasicInfo, getWeekEntries, saveWeekEntries } from './modules/storageModule.js';\nimport { loadAllCSVData, getProjectsByZone, getPMByProject, getProductModulesByZone, updateProjectOptions, updateProjectDropdown, updateProductModuleDropdown, updateActivityTypeOptions, generateCSVContent, downloadCSVFile } from './modules/csvModule.js';\nimport { getWeekNumber, getWeekDateRangeFromKey } from './modules/dateModule.js';\nimport {\n    showSuccessMessage,\n    showCopyOptionsModal,\n    closeCopyModal,\n    handleCopySelection,\n    copyWeekToTargetWeek\n} from './modules/uiModule.js';\n\n// 設置日期欄位的限制範圍\nfunction setDateFieldLimits(startDate, endDate) {\n    const minDate = formatDate(startDate);\n    const maxDate = formatDate(endDate);\n    \n    // 設置日期欄位的 min 和 max 屬性\n    const dateFields = ['date', 'startDate', 'endDate'];\n    dateFields.forEach(fieldId => {\n        const field = document.getElementById(fieldId);\n        if (field) {\n            field.min = minDate;\n            field.max = maxDate;\n            \n            // 如果欄位有值但超出範圍，則清空\n            if (field.value) {\n                const fieldDate = new Date(field.value);\n                if (fieldDate < startDate || fieldDate > endDate) {\n                    field.value = '';\n                }\n            }\n        }\n    });\n}\n\n// 驗證日期是否在週範圍內\nfunction validateDateInWeekRange(date, startDate, endDate) {\n    if (!date) return true; // 空值允許\n    \n    const inputDate = new Date(date);\n    return inputDate >= startDate && inputDate <= endDate;\n}\n\n// 啟用正規化模式\nfunction enableNormalizationMode(weekKey) {\n    // 儲存正規化狀態到 localStorage\n    const normalizationData = {\n        weekKey: weekKey,\n        enabled: true,\n        timestamp: new Date().toISOString()\n    };\n    localStorage.setItem(`normalization_${weekKey}`, JSON.stringify(normalizationData));\n    \n    // 更新 UI 顯示正規化模式狀態\n    updateNormalizationModeDisplay(weekKey);\n}\n\n// 檢查是否啟用正規化模式\nfunction isNormalizationEnabled(weekKey) {\n    const data = localStorage.getItem(`normalization_${weekKey}`);\n    return data ? JSON.parse(data).enabled : false;\n}\n\n// 更新正規化模式顯示\nfunction updateNormalizationModeDisplay(weekKey) {\n    const isEnabled = isNormalizationEnabled(weekKey);\n    const weekInfoDiv = document.querySelector('.week-info');\n    \n    // 移除舊的正規化提示\n    const existingAlert = weekInfoDiv.querySelector('.normalization-alert');\n    if (existingAlert) {\n        existingAlert.remove();\n    }\n    \n    if (isEnabled) {\n        // 顯示正規化模式提示\n        const alertDiv = document.createElement('div');\n        alertDiv.className = 'normalization-alert';\n        alertDiv.innerHTML = `\n            <div class=\"alert alert-info\">\n                <strong>📊 正規化模式已啟用</strong> - 該週工時超過40小時，匯出時將自動進行正規化計算\n                <button onclick=\"disableNormalizationMode('${weekKey}')\" class=\"btn-disable-normalization\">停用</button>\n            </div>\n        `;\n        weekInfoDiv.appendChild(alertDiv);\n    }\n}\n\n// 停用正規化模式\nfunction disableNormalizationMode(weekKey) {\n    localStorage.removeItem(`normalization_${weekKey}`);\n    updateNormalizationModeDisplay(weekKey);\n    showSuccessMessage('正規化模式已停用');\n}\n\n// 匯出時進行正規化計算\nfunction performNormalizationForExport(entries) {\n    let totalRegularHours = 0;\n\n    // 計算總正常工時\n    entries.forEach(entry => {\n        totalRegularHours += entry.regularHours || 0;\n    });\n\n    if (totalRegularHours > 40) {\n        const normalizedEntries = entries.map(entry => {\n            const originalHours = entry.regularHours || 0;\n            const ratio = 40 / totalRegularHours;\n            const newRegularHours = Math.round(originalHours * ratio * 100) / 100;\n            // 保存原始工時\n            return {\n                ...entry,\n                _originalHours: originalHours,\n                _isNormalized: true,\n                regularHours: newRegularHours,\n                ttlHours: newRegularHours + (entry.otHours || 0)\n            };\n        });\n        return normalizedEntries;\n    }\n\n    return entries; // 不需要正規化\n}\n// 格式化日期為 YYYY-MM-DD（本地時間）\nfunction formatDate(date) {\n    const y = date.getFullYear();\n    const m = String(date.getMonth() + 1).padStart(2, '0');\n    const d = String(date.getDate()).padStart(2, '0');\n    return `${y}-${m}-${d}`;\n}\n\n// 從localStorage加載所有工時表數據\nfunction loadAllTimesheets() {\n    const data = localStorage.getItem('timesheets');\n    return data ? JSON.parse(data) : {};\n}\n\n// 保存所有工時表數據到localStorage\nfunction saveAllTimesheets(timesheets) {\n    localStorage.setItem('timesheets', JSON.stringify(timesheets));\n}\n\n// 獲取指定週數的日期範圍（週日到週六）\nfunction getWeekDateRange(weekNumber, year) {\n    // 簡單實現：假設year和weekNumber是有效的\n    // 實際應根據ISO週數計算，這裡簡化為從當年第一週的週日開始推算\n    // 注意：這只是一個示例，實際的日期計算需要更嚴謹的邏輯\n    const firstDayOfYear = new Date(year, 0, 1);\n    const firstSunday = new Date(firstDayOfYear);\n    // 調整到第一週的週日（假設第一週從1月1日所在週的週日開始）\n    firstSunday.setDate(firstDayOfYear.getDate() - firstDayOfYear.getDay());\n    \n    const startDate = new Date(firstSunday);\n    startDate.setDate(firstSunday.getDate() + (weekNumber - 1) * 7);\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6);\n    \n    return {\n        start: startDate,\n        end: endDate\n    };\n}\n\n// 計算填寫進度（根據記錄筆數和預期5個工作日？這裡簡化為記錄筆數是否大於0）\nfunction calculateProgress(entries) {\n    // 如果有記錄，則認為填寫了，進度100%；否則0\n    return entries && entries.length > 0 ? 100 : 0;\n}\n\n// 渲染工時表卡片\nfunction renderTimesheetCards() {\n    const container = document.getElementById('timesheet-cards');\n    container.innerHTML = ''; // 清空容器\n    \n    const timesheets = loadAllTimesheets();\n    \n    Object.keys(timesheets).forEach(key => {\n        // key格式：YYYY-Www，需檢查合法性\n        if (!key || typeof key !== 'string' || !key.includes('-')) return;\n        const [year, week] = key.split('-');\n        if (!year || !week || week.length < 2) return;\n        const weekNumber = parseInt(week.substring(1));\n        if (isNaN(weekNumber)) return;\n        const weekData = timesheets[key];\n        \n        // 處理新的資料結構（包含 basicInfo 和 entries）\n        let entries = [];\n        if (Array.isArray(weekData)) {\n            // 舊的資料結構，直接是陣列\n            entries = weekData;\n        } else if (weekData && weekData.entries) {\n            // 新的資料結構，有 basicInfo 和 entries\n            entries = weekData.entries;\n        }\n        \n        const dateRange = getWeekDateRange(weekNumber, year);\n        const startStr = dateRange.start.toISOString().split('T')[0];\n        const endStr = dateRange.end.toISOString().split('T')[0];\n        \n        const totalHours = entries.reduce((sum, entry) => sum + (entry.ttlHours || entry.TTL_Hours || 0), 0);\n        const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n        const totalOtHours = entries.reduce((sum, entry) => sum + (entry.otHours || 0), 0);\n        const isComplete = totalHours >= 40;\n        \n        // 創建卡片元素\n        const card = document.createElement('div');\n        card.className = 'timesheet-card';\n        card.innerHTML = `\n            <div class=\"card-color-bar\"></div>\n            <div class=\"status-tag ${isComplete ? 'status-completed' : 'status-inprogress'}\"\n                 title=\"${isComplete ? '總工時已達40小時' : '總工時未達40小時'}\">\n                ${isComplete ? '✓' : '⚠'}\n            </div>\n            <div class=\"card-header\">\n                <div class=\"week-title\">${key}</div>\n                <div class=\"date-range\">${startStr} 至 ${endStr}</div>\n            </div>\n            <div class=\"stats\">\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\">${entries.length}</div>\n                    <div class=\"stat-label\">記錄筆數</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\">${totalHours}</div>\n                    <div class=\"stat-label\">總工時</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\">${totalRegularHours}</div>\n                    <div class=\"stat-label\">總正常工時</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\">${totalOtHours}</div>\n                    <div class=\"stat-label\">總加班工時</div>\n                </div>\n            </div>\n            <div class=\"card-actions\">\n                <button class=\"btn-edit\" data-week=\"${key}\">修改</button>\n                <button class=\"btn-copy\" data-week=\"${key}\">複製</button>\n                <button class=\"btn-delete\" data-week=\"${key}\">刪除</button>\n                <button class=\"btn-export\" data-week=\"${key}\">匯出</button>\n            </div>\n        `;\n        \n        container.appendChild(card);\n    });\n    \n    // 為卡片上的按鈕添加事件監聽\n    document.querySelectorAll('.btn-edit').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const weekKey = btn.getAttribute('data-week');\n            editTimesheet(weekKey);\n        });\n    });\n    \n    document.querySelectorAll('.btn-delete').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const weekKey = btn.getAttribute('data-week');\n            deleteTimesheet(weekKey);\n        });\n    });\n    \n    document.querySelectorAll('.btn-copy').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const weekKey = btn.getAttribute('data-week');\nconsole.log('Attempting to call showCopyOptionsModal with weekKey:', weekKey);\n            showCopyOptionsModal(weekKey);\n        });\n    });\n    \n    document.querySelectorAll('.btn-export').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const weekKey = btn.getAttribute('data-week');\n            exportTimesheet(weekKey);\n        });\n    });\n    \n    // 更新上週按鈕顯示狀態\n    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\n        updateLastWeekButtonDisplay();\n    }\n}\n\n// 新建工時表 - 顯示週次選擇模態框\nfunction newTimesheet() {\n    showWeekSelectionModal();\n}\n\n// 顯示週次選擇模態框\nfunction showWeekSelectionModal() {\n    const modal = document.getElementById('week-selection-modal');\n    const timesheets = loadAllTimesheets();\n    \n    // 計算上週和本週的週次\n    const lastWeekKey = getLastWeekKey();\n    const thisWeekKey = getThisWeekKey();\n    \n    // 更新上週選項資訊\n    const lastWeekInfo = document.getElementById('last-week-info');\n    const lastWeekStatus = document.getElementById('last-week-status');\n    const lastWeekOption = document.getElementById('option-last-week');\n    \n    if (lastWeekKey) {\n        const lastWeekRange = getWeekDateRangeFromKey(lastWeekKey);\n        lastWeekInfo.textContent = `${lastWeekKey} (${formatDate(lastWeekRange.start)} - ${formatDate(lastWeekRange.end)})`;\n        \n        if (timesheets[lastWeekKey]) {\n            lastWeekStatus.textContent = '已存在';\n            lastWeekStatus.className = 'option-status status-exists';\n            // 如果已存在，禁用該選項\n            document.getElementById('radio-last-week').disabled = true;\n            lastWeekOption.style.opacity = '0.6';\n        } else {\n            lastWeekStatus.textContent = '可建立';\n            lastWeekStatus.className = 'option-status status-new';\n            document.getElementById('radio-last-week').disabled = false;\n            lastWeekOption.style.opacity = '1';\n        }\n    } else {\n        lastWeekOption.style.display = 'none';\n    }\n    \n    // 更新本週選項資訊\n    const thisWeekInfo = document.getElementById('this-week-info');\n    const thisWeekStatus = document.getElementById('this-week-status');\n    const thisWeekOption = document.getElementById('option-this-week');\n    \n    if (thisWeekKey) {\n        const thisWeekRange = getWeekDateRangeFromKey(thisWeekKey);\n        thisWeekInfo.textContent = `${thisWeekKey} (${formatDate(thisWeekRange.start)} - ${formatDate(thisWeekRange.end)})`;\n        \n        if (timesheets[thisWeekKey]) {\n            thisWeekStatus.textContent = '已存在';\n            thisWeekStatus.className = 'option-status status-exists';\n            // 如果已存在，禁用該選項\n            document.getElementById('radio-this-week').disabled = true;\n            thisWeekOption.style.opacity = '0.6';\n        } else {\n            thisWeekStatus.textContent = '可建立';\n            thisWeekStatus.className = 'option-status status-new';\n            document.getElementById('radio-this-week').disabled = false;\n            thisWeekOption.style.opacity = '1';\n        }\n    } else {\n        thisWeekOption.style.display = 'none';\n    }\n    \n    // 重置自訂輸入\n    document.getElementById('custom-week-field').value = '';\n    document.getElementById('custom-week-input').style.display = 'none';\n    \n    // 清除選擇\n    document.querySelectorAll('input[name=\"weekOption\"]').forEach(radio => {\n        radio.checked = false;\n    });\n    \n    // 顯示模態框\n    modal.style.display = 'block';\n}\n\n// 取得上週的週次鍵值\nfunction getLastWeekKey() {\n    const today = new Date();\n    const lastMonday = new Date(today);\n    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n    \n    const year = lastMonday.getFullYear();\n    const weekNumber = getWeekNumber(lastMonday);\n    return `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n}\n\n// 取得本週的週次鍵值\nfunction getThisWeekKey() {\n    const today = new Date();\n    const thisMonday = new Date(today);\n    thisMonday.setDate(today.getDate() - today.getDay() + 1);\n    \n    const year = thisMonday.getFullYear();\n    const weekNumber = getWeekNumber(thisMonday);\n    return `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n}\n\n// 計算週數（ISO 8601）\n/**\n * 以週日為週首計算週次（YYYY-Www），週日~週六\n */\nfunction getWeekNumber(date) {\n    const d = new Date(date);\n    // 找到本週的週日\n    const sunday = new Date(d);\n    sunday.setDate(d.getDate() - d.getDay());\n    // 計算今年第一天的週日\n    const firstDay = new Date(d.getFullYear(), 0, 1);\n    const firstSunday = new Date(firstDay);\n    firstSunday.setDate(firstDay.getDate() - firstDay.getDay());\n    // 計算週數\n    const diff = sunday - firstSunday;\n    const weekNumber = Math.floor(diff / (7 * 24 * 60 * 60 * 1000)) + 1;\n    return weekNumber;\n}\n\n// 從週次鍵值取得日期範圍\nfunction getWeekDateRangeFromKey(weekKey) {\n    const [year, week] = weekKey.split('-');\n    const weekNumber = parseInt(week.substring(1));\n    return getWeekDateRange(weekNumber, year);\n}\n\n// 修改工時表（跳轉到編輯頁面）\nfunction editTimesheet(weekKey) {\n    // 跳轉到工時填寫界面\n    window.location.href = `edit.html?week=${encodeURIComponent(weekKey)}`;\n}\n\n// 刪除工時表\nfunction deleteTimesheet(weekKey) {\n    if (confirm(`確定要刪除 ${weekKey} 的工時表嗎？`)) {\n        const timesheets = loadAllTimesheets();\n        delete timesheets[weekKey];\n        saveAllTimesheets(timesheets);\n        renderTimesheetCards();\n    }\n}\n\n// 匯出工時表為CSV檔案\nfunction exportTimesheet(weekKey) {\n    try {\n        const entries = getWeekEntries(weekKey);\n        if (!entries || entries.length === 0) {\n            alert('該週次沒有工時記錄可匯出');\n            return;\n        }\n\n        // 匯出前檢查總正常工時，若超過40小時則提示\n        const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n        // 若超過40小時，提示將自動正規化\n        if (totalRegularHours > 40) {\n            alert('本週正常工時超過40小時，滙出時將自動進行正規化計算。\\n\\n注意：若下載檔案時選擇覆蓋舊檔，且舊檔正在開啟狀態，下載可能會失敗並顯示「需要下載權限」等錯誤，請先關閉舊檔再下載。');\n        }\n\n        let exportEntries = [...entries];\n\n        if (totalRegularHours > 40) {\n            exportEntries = performNormalizationForExport(exportEntries);\n        }\n\n        // 準備CSV內容\n        const csvContent = generateCSVContent(exportEntries, weekKey);\n\n        // 創建並下載檔案\n        downloadCSVFile(csvContent, `工時表_${weekKey}.csv`);\n\n        // 顯示成功訊息\n        showSuccessMessage(`${weekKey} 工時表已匯出`);\n\n    } catch (error) {\n        console.error('匯出失敗:', error);\n        alert('匯出失敗，請檢查瀏覽器控制台');\n    }\n}\n// 滙出未經正規化的原始工時\nfunction exportRawTimesheet(weekKey) {\n    try {\n        const entries = getWeekEntries(weekKey);\n        if (!entries || entries.length === 0) {\n            alert('該週次沒有工時記錄可匯出');\n            return;\n        }\n        // 直接滙出原始工時資料\n        const csvContent = generateCSVContent(entries, weekKey);\n        downloadCSVFile(csvContent, `工時表_${weekKey}_原始.csv`);\n        showSuccessMessage(`${weekKey} 工時表（原始）已匯出`);\n    } catch (error) {\n        console.error('原始工時匯出失敗:', error);\n        alert('原始工時匯出失敗，請檢查瀏覽器控制台');\n    }\n}\n\n// 生成CSV內容\nfunction generateCSVContent(entries, weekKey) {\n    // CSV標題行（按照指定格式）\n    const headers = [\n        'Name',\n        'Zone',\n        'Project',\n        'Product Module',\n        'Activity Type',\n        'Task',\n        'Regular Hours',\n        'OT Hours',\n        'TTL_Hours',\n        'Date',\n        'Start Date',\n        'End Date',\n        'Comments',\n        'PM',\n        'InternalOrOutsource'\n    ];\n\n    // 載入基本資料\n    const basicInfo = loadGlobalBasicInfo();\n    \n    // 轉換資料行\n    const dataRows = entries.map(entry => {\n        const regularHours = parseFloat(entry.regularHours) || 0;\n        const overtimeHours = parseFloat(entry.overtimeHours) || parseFloat(entry.otHours) || 0;\n        const totalHours = parseFloat(entry.ttlHours) || (regularHours + overtimeHours);\n        \n        return [\n            basicInfo.employeeName || '',           // Name\n            entry.zone || '',                       // Zone\n            entry.project || '',                    // Project\n            entry.productModule || '',              // Product Module\n            entry.activityType || '',               // Activity Type\n            entry.task || '',                       // Task\n            regularHours,                           // Regular Hours\n            overtimeHours,                          // OT Hours\n            totalHours,                             // TTL_Hours\n            entry.date || '',                       // Date\n            entry.startDate || '',                  // Start Date\n            entry.endDate || '',                    // End Date\n            entry.comments || '',                   // Comments\n            entry.pm || '',                         // PM\n            basicInfo.employeeType || ''            // InternalOrOutsource\n        ];\n    });\n\n    // 組合CSV內容\n    const csvRows = [headers, ...dataRows];\n    \n    // 轉換為CSV格式字串\n    return csvRows.map(row =>\n        row.map(field => {\n            // 處理包含逗號或換行的欄位\n            const fieldStr = String(field);\n            if (fieldStr.includes(',') || fieldStr.includes('\\n') || fieldStr.includes('\"')) {\n                return '\"' + fieldStr.replace(/\"/g, '\"\"') + '\"';\n            }\n            return fieldStr;\n        }).join(',')\n    ).join('\\n');\n}\n\n// 下載CSV檔案\nfunction downloadCSVFile(csvContent, filename) {\n    try {\n        console.log('[downloadCSVFile] 開始下載', { filename, csvContentSample: csvContent.slice(0, 100) });\n        // 添加BOM以支援中文\n        const BOM = '\\uFEFF';\n        const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n        console.log('[downloadCSVFile] Blob created', blob);\n        const url = URL.createObjectURL(blob);\n        console.log('[downloadCSVFile] Object URL', url);\n        const link = document.createElement('a');\n        link.setAttribute('href', url);\n        link.setAttribute('download', filename);\n        link.style.visibility = 'hidden';\n        // 添加到頁面並觸發下載\n        document.body.appendChild(link);\n        link.click();\n        console.log('[downloadCSVFile] link.click() 已觸發');\n        // 清理\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n        console.log('[downloadCSVFile] 清理完成');\n    } catch (err) {\n        console.error('[downloadCSVFile] 發生錯誤', err);\n    }\n}\n\n// 匯入工時表（暫時只提示）\nfunction importTimesheet() {\n    const input = document.getElementById('import-file');\n    input.value = ''; // 重置 input，避免同檔案無法重選\n    input.onchange = async function (event) {\n        const file = event.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = function (e) {\n            const text = e.target.result;\n            try {\n                console.log('[import] 原始CSV內容:', text);\n                \n                // 檢查檔案是否為空\n                if (!text || text.trim().length === 0) {\n                    alert('檔案內容為空，請選擇有效的CSV檔案。');\n                    return;\n                }\n                \n                const data = parseCSV(text);\n                console.log('[import] parseCSV result:', data);\n                \n                // 檢查是否成功解析出資料\n                if (!data || data.length === 0) {\n                    alert('無法從檔案中解析出有效資料，請檢查CSV格式是否正確。');\n                    return;\n                }\n                \n                // 強制將 data 轉為 array\n                console.log('[import] typeof data:', typeof data, 'Array.isArray:', Array.isArray(data));\n                let arr = [];\n                if (Array.isArray(data)) {\n                    arr = data;\n                } else if (typeof data === 'object' && data !== null) {\n                    arr = Object.values(data).flat();\n                }\n                console.log('[import] 轉換後 arr:', arr);\n                \n                if (arr.length === 0) {\n                    alert('檔案中沒有有效的工時記錄。');\n                    return;\n                }\n                let groupedData = {};\n                const failedRows = [];\n                \n                arr.forEach((row, index) => {\n                    if (!row) return;\n                    \n                    // 檢查日期欄位（支援多種可能的欄位名稱）\n                    const dateValue = row.Date || row.date || row['日期'] || row.Day;\n                    if (!dateValue) {\n                        console.warn(`[import] 第${index + 1}筆記錄缺少日期欄位:`, row);\n                        failedRows.push(`第${index + 1}筆記錄：缺少日期欄位`);\n                        return;\n                    }\n                    \n                    // 改進的日期解析，支援多種格式\n                    let dateObj = null;\n                    const dateStr = dateValue.toString().trim();\n                    \n                    // 嘗試多種日期格式\n                    const dateFormats = [\n                        dateStr, // 原始格式\n                        dateStr.replace(/\\//g, '-'), // 將 / 替換為 -\n                        dateStr.replace(/\\./g, '-'), // 將 . 替換為 -\n                    ];\n                    \n                    for (const format of dateFormats) {\n                        dateObj = new Date(format);\n                        if (!isNaN(dateObj.getTime()) && dateObj.getFullYear() > 1900) {\n                            break;\n                        }\n                        dateObj = null;\n                    }\n                    \n                    if (!dateObj || isNaN(dateObj.getTime())) {\n                        console.warn(`[import] 第${index + 1}筆記錄日期格式無效:`, dateValue);\n                        failedRows.push(`第${index + 1}筆記錄：日期格式無效 \"${dateValue}\"`);\n                        return;\n                    }\n                    \n                    try {\n                        // 正確計算週次\n                        const year = dateObj.getFullYear();\n                        const weekNumber = getWeekNumber(dateObj);\n                        const weekKey = `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n                        console.log('[import][分組] Date:', dateValue, 'parsed:', dateObj, 'year:', year, 'weekNumber:', weekNumber, 'weekKey:', weekKey);\n                        \n                        if (!groupedData[weekKey]) groupedData[weekKey] = [];\n                        \n                        // 標準化記錄格式，確保日期統一和必要欄位\n                        const standardizedRow = { ...row };\n                        standardizedRow.date = dateObj.toISOString().split('T')[0]; // YYYY-MM-DD 格式\n                        \n                        // 確保有唯一的 ID\n                        if (!standardizedRow.id) {\n                            standardizedRow.id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n                        }\n                        \n                        // 確保數字欄位有預設值\n                        standardizedRow.regularHours = standardizedRow.regularHours || 0;\n                        standardizedRow.otHours = standardizedRow.otHours || 0;\n                        standardizedRow.ttlHours = standardizedRow.ttlHours || (standardizedRow.regularHours + standardizedRow.otHours);\n                        \n                        groupedData[weekKey].push(standardizedRow);\n                    } catch (err) {\n                        console.error(`[import] 處理第${index + 1}筆記錄時發生錯誤:`, err, row);\n                        failedRows.push(`第${index + 1}筆記錄：處理時發生錯誤`);\n                    }\n                });\n                \n                // 如果有失敗的記錄，顯示警告\n                if (failedRows.length > 0) {\n                    console.warn('[import] 以下記錄匯入失敗:', failedRows);\n                    const proceed = confirm(`有 ${failedRows.length} 筆記錄匯入失敗：\\n${failedRows.slice(0, 5).join('\\n')}${failedRows.length > 5 ? '\\n...' : ''}\\n\\n是否繼續匯入其他記錄？`);\n                    if (!proceed) {\n                        alert('匯入已取消');\n                        return;\n                    }\n                }\n                console.log('[import] 自動分組週次結果:', groupedData);\n                // 合併匯入資料到主 timesheets\n                const timesheets = loadAllTimesheets();\n                console.log('[import] localStorage timesheets(匯入前):', timesheets);\n                const importedWeeks = [];\n                for (const weekKey in groupedData) {\n                    console.log('[import] 檢查週次', weekKey, groupedData[weekKey]);\n                    if (timesheets[weekKey]) {\n                        const overwrite = confirm('週次 ' + weekKey + ' 已有資料，是否覆蓋？');\n                        console.log('[import] 覆蓋確認', weekKey, overwrite);\n                        if (!overwrite) continue;\n                    }\n                    timesheets[weekKey] = groupedData[weekKey];\n                    importedWeeks.push(weekKey);\n                    console.log('[import] 已加入週次:', weekKey);\n                }\n                console.log('[import] importedWeeks:', importedWeeks);\n                console.log('[import] localStorage timesheets(匯入後):', timesheets);\n                \n                if (Object.keys(groupedData).length === 0) {\n                    alert('沒有有效的記錄可以匯入。請檢查CSV檔案中的日期格式和資料內容。');\n                    return;\n                }\n                \n                saveAllTimesheets(timesheets);\n                renderTimesheetCards();\n                \n                if (importedWeeks.length > 0) {\n                    const weekInfoList = importedWeeks.map(weekKey => {\n                        try {\n                            const range = getWeekDateRangeFromKey(weekKey);\n                            const start = range.start.toISOString().split('T')[0];\n                            const end = range.end.toISOString().split('T')[0];\n                            const recordCount = groupedData[weekKey].length;\n                            return `${weekKey} (${start} ~ ${end}) - ${recordCount}筆記錄`;\n                        } catch (err) {\n                            console.error('[import] 取得週次範圍失敗:', weekKey, err);\n                            return `${weekKey} - ${groupedData[weekKey].length}筆記錄`;\n                        }\n                    });\n                    \n                    const totalRecords = importedWeeks.reduce((sum, weekKey) => sum + groupedData[weekKey].length, 0);\n                    const successMessage = `匯入成功！\\n共匯入 ${totalRecords} 筆記錄到 ${importedWeeks.length} 個週次：\\n\\n${weekInfoList.join('\\n')}`;\n                    \n                    if (failedRows.length > 0) {\n                        alert(successMessage + `\\n\\n注意：有 ${failedRows.length} 筆記錄匯入失敗。`);\n                    } else {\n                        alert(successMessage);\n                    }\n                } else {\n                    alert('未匯入任何週次資料。所有記錄都被跳過了。');\n                }\n            } catch (err) {\n                console.error('[import] 匯入流程發生錯誤:', err);\n                let errorMessage = 'CSV 匯入失敗：\\n';\n                if (err.message) {\n                    errorMessage += err.message;\n                } else {\n                    errorMessage += '未知錯誤，請檢查瀏覽器控制台獲取更多資訊。';\n                }\n                alert(errorMessage);\n            }\n        };\n        reader.readAsText(file, 'utf-8');\n    };\n    input.click();\n}\n\n// ==================== 首頁模態框功能 ====================\n\n// 顯示基本資料設定模態框\nfunction showBasicInfoModal() {\n    const modal = document.getElementById('basic-info-modal');\n    const basicInfo = loadGlobalBasicInfo();\n    \n    // 載入現有資料\n    if (basicInfo) {\n        document.getElementById('modal-employeeName').value = basicInfo.employeeName || '';\n        document.getElementById('modal-employeeType').value = basicInfo.employeeType || '';\n    }\n    \n    modal.style.display = 'block';\n}\n\n// 隱藏基本資料設定模態框\nfunction hideBasicInfoModal() {\n    const modal = document.getElementById('basic-info-modal');\n    modal.style.display = 'none';\n    \n    // 清空表單\n    document.getElementById('modal-basic-info-form').reset();\n}\n\n// 儲存模態框中的基本資料\nfunction saveModalBasicInfo() {\n    const employeeName = document.getElementById('modal-employeeName').value.trim();\n    const employeeType = document.getElementById('modal-employeeType').value;\n    \n    if (!employeeName || !employeeType) {\n        alert('請填寫所有必填欄位');\n        return;\n    }\n    \n    const basicInfo = {\n        employeeName: employeeName,\n        employeeType: employeeType\n    };\n    \n    saveGlobalBasicInfo(basicInfo);\n    hideBasicInfoModal();\n    alert('基本資料已儲存成功！（全 App 共用）');\n}\n\n// 初始化：頁面加載完成後渲染卡片，並綁定按鈕事件\ndocument.addEventListener('DOMContentLoaded', () => {\n    // 檢查是否為首頁\n    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\n        renderTimesheetCards();\n        \n        // 綁定全局按鈕事件\n        document.getElementById('btn-basic-info').addEventListener('click', showBasicInfoModal);\n        document.getElementById('btn-new').addEventListener('click', newTimesheet);\n        document.getElementById('btn-import').addEventListener('click', importTimesheet);\n        document.getElementById('btn-clear-storage').addEventListener('click', () => {\n            if (confirm('確定要清空所有資料嗎？此操作無法還原。')) {\n                localStorage.clear();\n                renderTimesheetCards();\n                alert('localStorage 已清空');\n            }\n        });\n        \n        // 綁定基本資料模態框事件\n        document.getElementById('btn-save-modal-basic-info').addEventListener('click', saveModalBasicInfo);\n        document.getElementById('btn-cancel-modal').addEventListener('click', hideBasicInfoModal);\n        document.querySelector('.close').addEventListener('click', hideBasicInfoModal);\n        \n        // 綁定週次選擇模態框事件\n        const weekModal = document.getElementById('week-selection-modal');\n        if (weekModal) {\n            const weekCloseBtn = weekModal.querySelector('.close');\n            const confirmWeekBtn = document.getElementById('btn-confirm-week');\n            const cancelWeekBtn = document.getElementById('btn-cancel-week');\n            const customRadio = document.getElementById('radio-custom');\n            const customInput = document.getElementById('custom-week-input');\n            \n            if (weekCloseBtn) weekCloseBtn.addEventListener('click', hideWeekSelectionModal);\n            if (cancelWeekBtn) cancelWeekBtn.addEventListener('click', hideWeekSelectionModal);\n            if (confirmWeekBtn) confirmWeekBtn.addEventListener('click', confirmWeekSelection);\n            \n            // 監聽自訂選項的選擇\n            if (customRadio && customInput) {\n                customRadio.addEventListener('change', function() {\n                    if (this.checked) {\n                        customInput.style.display = 'block';\n                    }\n                });\n            }\n            \n            // 監聽其他選項的選擇（隱藏自訂輸入）\n            document.querySelectorAll('input[name=\"weekOption\"]:not(#radio-custom)').forEach(radio => {\n                radio.addEventListener('change', function() {\n                    if (this.checked && customInput) {\n                        customInput.style.display = 'none';\n                    }\n                });\n            });\n        }\n        \n        // 點擊模態框外部關閉\n        window.addEventListener('click', (event) => {\n            const basicModal = document.getElementById('basic-info-modal');\n            const weekSelectionModal = document.getElementById('week-selection-modal');\n            \n            if (event.target === basicModal) {\n                hideBasicInfoModal();\n            } else if (event.target === weekSelectionModal) {\n                hideWeekSelectionModal();\n            }\n        });\n\n        // 設置上週按鈕的文字和顯示狀態\n        const lastWeekButton = document.getElementById('btn-last-week');\n        if (lastWeekButton) {\n            updateLastWeekButtonDisplay();\n            // 綁定點擊事件\n            lastWeekButton.addEventListener('click', createLastWeekTimesheet);\n        }\n    }\n});\n\n// 更新上週按鈕顯示狀態和文字\nfunction updateLastWeekButtonDisplay() {\n    const today = new Date();\n    // 更精確的計算：獲取上週一（今天減去今天星期幾再減6天）\n    const lastMonday = new Date(today);\n    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n    const lastSunday = new Date(lastMonday);\n    lastSunday.setDate(lastMonday.getDate() + 6);\n    \n    const button = document.getElementById('btn-last-week');\n    const container = document.getElementById('last-week-container');\n    \n    if (button && container) {\n        // 檢查上週是否已存在\n        const lastWeekKey = getLastWeekKey();\n        const timesheets = loadAllTimesheets();\n        \n        if (timesheets[lastWeekKey]) {\n            // 上週已存在，隱藏按鈕\n            container.style.display = 'none';\n        } else {\n            // 上週不存在，顯示按鈕並設置文字\n            container.style.display = 'block';\n            button.textContent = `建立上週工時表 (${formatDate(lastMonday)} - ${formatDate(lastSunday)})`;\n        }\n    }\n}\n\n// 建立上週工時表\nfunction createLastWeekTimesheet() {\n    const today = new Date();\n    const lastMonday = new Date(today);\n    lastMonday.setDate(today.getDate() - today.getDay() - 6);\n    const lastSunday = new Date(lastMonday);\n    lastSunday.setDate(lastMonday.getDate() + 6);\n    \n    // 生成週次格式 YYYY-Www\n    const year = lastMonday.getFullYear();\n    const weekNumber = Math.ceil((((lastMonday - new Date(year, 0, 1)) / 86400000) + new Date(year, 0, 1).getDay() + 1) / 7);\n    const weekKey = `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n    \n    const timesheets = loadAllTimesheets();\n    if (!timesheets[weekKey]) {\n        timesheets[weekKey] = [];\n        saveAllTimesheets(timesheets);\n    }\n    \n    // 載入上週工時表\n    editTimesheet(weekKey);\n    renderTimesheetCards();\n}\n\n// ==================== 編輯頁面功能 ====================\n\n// 生成唯一 ID\nfunction generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n\n// 獲取當前編輯的週次\nfunction getCurrentWeekKey() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('week');\n}\n\n// ==================== 全域基本資料管理 ====================\n\n// 載入全域基本資料\nfunction loadGlobalBasicInfo() {\n    const data = localStorage.getItem('globalBasicInfo');\n    return data ? JSON.parse(data) : null;\n}\n\n// 儲存全域基本資料\nfunction saveGlobalBasicInfo(basicInfo) {\n    localStorage.setItem('globalBasicInfo', JSON.stringify(basicInfo));\n}\n\n// ==================== 工時記錄管理 ====================\n\n// 獲取指定週次的工時記錄\nfunction getWeekEntries(weekKey) {\n    const timesheets = loadAllTimesheets();\n    const weekData = timesheets[weekKey];\n    \n    // 處理不同的資料結構\n    if (Array.isArray(weekData)) {\n        // 舊的資料結構，直接是陣列\n        return weekData;\n    } else if (weekData && weekData.entries) {\n        // 新的資料結構，有 entries\n        return weekData.entries;\n    }\n    \n    return [];\n}\n\n// 儲存指定週次的工時記錄\nfunction saveWeekEntries(weekKey, entries) {\n    const timesheets = loadAllTimesheets();\n    timesheets[weekKey] = entries; // 直接儲存為陣列，簡化結構\n    saveAllTimesheets(timesheets);\n}\n\n// 計算總工時\nfunction calculateTotalHours() {\n    const regular = parseFloat(document.getElementById('regularHours').value) || 0;\n    const ot = parseFloat(document.getElementById('otHours').value) || 0;\n    document.getElementById('ttlHours').value = regular + ot;\n}\n\n// 驗證基本資料表單\nfunction validateBasicInfo() {\n    const requiredFields = ['employeeName', 'employeeType'];\n    let isValid = true;\n    \n    // 清除之前的錯誤狀態\n    document.querySelectorAll('#basic-info-form .form-field.error').forEach(field => {\n        field.classList.remove('error');\n    });\n    \n    requiredFields.forEach(fieldName => {\n        const field = document.getElementById(fieldName);\n        const formField = field.closest('.form-field');\n        \n        if (!field.value.trim()) {\n            formField.classList.add('error');\n            showFieldError(formField, '此欄位為必填');\n            isValid = false;\n        }\n    });\n    \n    return isValid;\n}\n\n// 驗證工時記錄表單\nfunction validateForm() {\n    const requiredFields = ['task', 'zone', 'project', 'activityType', 'regularHours', 'date'];\n    let isValid = true;\n    \n    // 檢查是否已儲存全域基本資料\n    const basicInfo = loadGlobalBasicInfo();\n    if (!basicInfo) {\n        alert('請先填寫並儲存基本資料');\n        document.querySelector('.basic-info-container').scrollIntoView({ behavior: 'smooth' });\n        return false;\n    }\n    \n    // 清除之前的錯誤狀態\n    document.querySelectorAll('#timesheet-form .form-field.error').forEach(field => {\n        field.classList.remove('error');\n    });\n    \n    requiredFields.forEach(fieldName => {\n        const field = document.getElementById(fieldName);\n        const formField = field.closest('.form-field');\n        \n        if (!field.value.trim()) {\n            formField.classList.add('error');\n            showFieldError(formField, '此欄位為必填');\n            isValid = false;\n        }\n    });\n    \n    // 驗證工時範圍\n    const regularHours = parseFloat(document.getElementById('regularHours').value);\n    const otHours = parseFloat(document.getElementById('otHours').value) || 0;\n    \n    if (regularHours < 0 || regularHours > 24) {\n        const formField = document.getElementById('regularHours').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, '正常工時必須在 0-24 小時之間');\n        isValid = false;\n    }\n    \n    if (otHours < 0 || otHours > 24) {\n        const formField = document.getElementById('otHours').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, '加班工時必須在 0-24 小時之間');\n        isValid = false;\n    }\n    \n    // 允許正常工時總計超過40小時，僅於匯出時提示正規化\n    const weekKey = getCurrentWeekKey();\n    const currentEntryId = document.getElementById('entryId').value;\n    const entries = getWeekEntries(weekKey);\n    \n    // 計算除了當前編輯記錄外的其他記錄的正常工時總和\n    let totalRegularHours = 0;\n    entries.forEach(entry => {\n        if (entry.id !== currentEntryId) {\n            totalRegularHours += entry.regularHours || 0;\n        }\n    });\n    \n    // 加上當前輸入的正常工時\n    totalRegularHours += regularHours;\n    \n    // 不再於此處限制或提示，僅於匯出時處理正規化\n    \n    // 驗證日期邏輯\n    const startDate = document.getElementById('startDate').value;\n    const endDate = document.getElementById('endDate').value;\n    const date = document.getElementById('date').value;\n    \n    // 獲取當前週的日期範圍（使用已宣告的 weekKey）\n    const [year, week] = weekKey.split('-');\n    const weekNumber = parseInt(week.substring(1));\n    const weekRange = getWeekDateRange(weekNumber, year);\n    \n    // 驗證主要日期是否在週範圍內\n    if (date && !validateDateInWeekRange(date, weekRange.start, weekRange.end)) {\n        const formField = document.getElementById('date').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, `日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n        isValid = false;\n    }\n    \n    // 驗證開始日期是否在週範圍內\n    if (startDate && !validateDateInWeekRange(startDate, weekRange.start, weekRange.end)) {\n        const formField = document.getElementById('startDate').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, `開始日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n        isValid = false;\n    }\n    \n    // 驗證結束日期是否在週範圍內\n    if (endDate && !validateDateInWeekRange(endDate, weekRange.start, weekRange.end)) {\n        const formField = document.getElementById('endDate').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, `結束日期必須在 ${formatDate(weekRange.start)} 至 ${formatDate(weekRange.end)} 範圍內`);\n        isValid = false;\n    }\n    \n    // 驗證開始日期不能晚於結束日期\n    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {\n        const formField = document.getElementById('endDate').closest('.form-field');\n        formField.classList.add('error');\n        showFieldError(formField, '結束日期不能早於開始日期');\n        isValid = false;\n    }\n    \n    return isValid;\n}\n\n// 顯示欄位錯誤訊息\nfunction showFieldError(formField, message) {\n    let errorDiv = formField.querySelector('.error-message');\n    if (!errorDiv) {\n        errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        formField.appendChild(errorDiv);\n    }\n    errorDiv.textContent = message;\n}\n\n// 清空表單\nfunction clearForm() {\n    document.getElementById('timesheet-form').reset();\n    document.getElementById('entryId').value = '';\n    document.getElementById('ttlHours').value = '';\n    \n    // 清除錯誤狀態\n    document.querySelectorAll('.form-field.error').forEach(field => {\n        field.classList.remove('error');\n    });\n}\n\n// 獲取基本資料\nfunction getBasicInfoData() {\n    return {\n        employeeName: document.getElementById('employeeName').value.trim(),\n        employeeType: document.getElementById('employeeType').value\n    };\n}\n\n// 填充基本資料\nfunction fillBasicInfo(basicInfo) {\n    if (basicInfo) {\n        document.getElementById('employeeName').value = basicInfo.employeeName || '';\n        document.getElementById('employeeType').value = basicInfo.employeeType || '';\n    }\n}\n\n// 從表單獲取工時記錄數據\nfunction getFormData() {\n    const basicInfo = loadGlobalBasicInfo();\n    const originalHours = document.getElementById('originalHours').value;\n    \n    const data = {\n        id: document.getElementById('entryId').value || generateUniqueId(),\n        // 從全域基本資料引用\n        name: basicInfo ? basicInfo.employeeName : '',\n        internalOrOutsource: basicInfo ? basicInfo.employeeType : '',\n        // 工時記錄特定欄位\n        zone: document.getElementById('zone').value,\n        project: document.getElementById('project').value.trim(),\n        productModule: document.getElementById('productModule').value.trim(),\n        activityType: document.getElementById('activityType').value,\n        task: document.getElementById('task').value.trim(),\n        regularHours: parseFloat(document.getElementById('regularHours').value) || 0,\n        otHours: parseFloat(document.getElementById('otHours').value) || 0,\n        ttlHours: parseFloat(document.getElementById('ttlHours').value) || 0,\n        date: document.getElementById('date').value,\n        startDate: document.getElementById('startDate').value,\n        endDate: document.getElementById('endDate').value,\n        comments: document.getElementById('comments').value.trim(),\n        pm: document.getElementById('pm').value.trim()\n    };\n    \n    // 如果有原始工時（正規化模式），則儲存但標記為內部使用\n    if (originalHours && parseFloat(originalHours) > 0) {\n        data._originalHours = parseFloat(originalHours); // 使用 _ 前綴標記為內部欄位\n        data._isNormalized = true;\n    }\n    \n    return data;\n}\n\n// 填充工時記錄表單數據\nfunction fillForm(entry) {\n    document.getElementById('entryId').value = entry.id;\n    document.getElementById('zone').value = entry.zone || '';\n    document.getElementById('project').value = entry.project || '';\n    document.getElementById('productModule').value = entry.productModule || '';\n    document.getElementById('activityType').value = entry.activityType || '';\n    document.getElementById('task').value = entry.task || '';\n    document.getElementById('regularHours').value = entry.regularHours || '';\n    document.getElementById('otHours').value = entry.otHours || 0;\n    document.getElementById('ttlHours').value = entry.ttlHours || '';\n    document.getElementById('date').value = entry.date || '';\n    document.getElementById('startDate').value = entry.startDate || '';\n    document.getElementById('endDate').value = entry.endDate || '';\n    document.getElementById('comments').value = entry.comments || '';\n    document.getElementById('pm').value = entry.pm || '';\n    \n    // 處理原始工時欄位（正規化模式）\n    const originalHoursField = document.getElementById('originalHoursField');\n    if (entry._originalHours && entry._isNormalized) {\n        document.getElementById('originalHours').value = entry._originalHours;\n        originalHoursField.style.display = 'block';\n    } else {\n        document.getElementById('originalHours').value = '';\n        originalHoursField.style.display = 'none';\n    }\n}\n\n// 儲存基本資料\nfunction saveBasicInfo() {\n    if (!validateBasicInfo()) {\n        return;\n    }\n    \n    const basicInfoData = getBasicInfoData();\n    saveGlobalBasicInfo(basicInfoData);\n    \n    // 更新 UI 狀態\n    const container = document.querySelector('.basic-info-container');\n    container.classList.add('basic-info-saved');\n    \n    showSuccessMessage('基本資料已儲存成功！（全 App 共用）');\n}\n\n// 儲存工時記錄\nfunction saveEntry() {\n    if (!validateForm()) {\n        return;\n    }\n    \n    const weekKey = getCurrentWeekKey();\n    if (!weekKey) {\n        alert('無效的週次參數');\n        return;\n    }\n    \n    const formData = getFormData();\n    const entries = getWeekEntries(weekKey);\n    \n    // 檢查是否為新增或編輯\n    const existingIndex = entries.findIndex(entry => entry.id === formData.id);\n    \n    if (existingIndex !== -1) {\n        // 編輯現有記錄\n        entries[existingIndex] = formData;\n    } else {\n        // 新增記錄\n        entries.push(formData);\n    }\n    \n    saveWeekEntries(weekKey, entries);\n    renderEntriesList();\n    clearForm();\n    showSuccessMessage('工時記錄已儲存成功！');\n}\n\n// 編輯工時記錄\nfunction editEntry(entryId) {\n    const weekKey = getCurrentWeekKey();\n    const entries = getWeekEntries(weekKey);\n    const entry = entries.find(e => e.id === entryId);\n    \n    if (entry) {\n        fillForm(entry);\n        // 滾動到表單頂部\n        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n    }\n}\n\n// 複製工時記錄\nfunction copyEntry(entryId) {\n    const weekKey = getCurrentWeekKey();\n    const entries = getWeekEntries(weekKey);\n    const entry = entries.find(e => e.id === entryId);\n    \n    if (entry) {\n        // 獲取當週日期範圍\n        const [year, week] = weekKey.split('-');\n        const weekNumber = parseInt(week.substring(1));\n        const weekRange = getWeekDateRange(weekNumber, year);\n        \n        // 複製記錄資料並更新日期\n        const copiedEntry = { ...entry, id: generateUniqueId() };\n        \n        // 更新日期（如果是單日記錄）\n        if (copiedEntry.date) {\n            const originalDate = new Date(copiedEntry.date);\n            const nextDate = new Date(originalDate);\n            nextDate.setDate(originalDate.getDate() + 1);\n            \n            // 檢查是否超過週範圍\n            if (nextDate <= weekRange.end) {\n                copiedEntry.date = formatDate(nextDate);\n            } else {\n                // 如果是週最後一天，則重置為週第一天\n                copiedEntry.date = formatDate(weekRange.start);\n            }\n        }\n        \n        fillForm(copiedEntry);\n        // 滾動到表單頂部\n        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n        showSuccessMessage('工時記錄已複製，日期已自動調整');\n    }\n}\n\n// 刪除工時記錄\nfunction deleteEntry(entryId) {\n    if (!confirm('確定要刪除這筆工時記錄嗎？')) {\n        return;\n    }\n    \n    const weekKey = getCurrentWeekKey();\n    const entries = getWeekEntries(weekKey);\n    const filteredEntries = entries.filter(entry => entry.id !== entryId);\n    \n    saveWeekEntries(weekKey, filteredEntries);\n    renderEntriesList();\n    showSuccessMessage('工時記錄已刪除！');\n}\n\n// 渲染工時記錄列表\nfunction renderEntriesList() {\n    const weekKey = getCurrentWeekKey();\n    const entries = getWeekEntries(weekKey);\n    const tbody = document.getElementById('entries-tbody');\n    \n    if (!tbody) return;\n    \n    tbody.innerHTML = '';\n    \n    let totalHours = 0;\n    \n    entries.forEach(entry => {\n        totalHours += entry.ttlHours || 0;\n        \n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td>${entry.date || '-'}</td>\n            <td>${entry.zone || '-'}</td>\n            <td>${entry.activityType || '-'}</td>\n            <td>${entry.task || '-'}</td>\n            <td>${entry.regularHours || 0}</td>\n            <td>${entry.otHours || 0}</td>\n            <td><strong>${entry.ttlHours || 0}</strong></td>\n            <td class=\"entry-actions\">\n                <button class=\"btn-edit-entry\" onclick=\"editEntry('${entry.id}')\">編輯</button>\n                <button class=\"btn-copy-entry\" onclick=\"copyEntry('${entry.id}')\">複製</button>\n                <button class=\"btn-delete-entry\" onclick=\"deleteEntry('${entry.id}')\">刪除</button>\n            </td>\n        `;\n        tbody.appendChild(row);\n    });\n    \n    \n    alert('成功複製 ' + copiedEntries.length + ' 筆工時記錄到目標週！\\n\\n來源週：' + sourceWeekKey + '\\n目標週：' + targetWeekKey + '\\n日期範圍：' + startDate + ' ~ ' + endDate + '\\n\\n所有日期已自動調整為目標週對應日期。');\n}\n\n// 顯示成功訊息\nfunction showSuccessMessage(message) {\n    // 創建或更新成功訊息元素\n    let successDiv = document.querySelector('.success-message');\n    if (!successDiv) {\n        successDiv = document.createElement('div');\n        successDiv.className = 'success-message';\n        document.querySelector('.form-container').insertBefore(successDiv, document.querySelector('.form-container').firstChild);\n    }\n    \n    successDiv.textContent = message;\n    successDiv.style.display = 'block';\n    \n    // 3秒後自動隱藏\n    setTimeout(() => {\n        successDiv.style.display = 'none';\n    }, 3000);\n}\n\n// 初始化編輯頁面\nasync function initEditPage() {\n    const weekKey = getCurrentWeekKey();\n    if (!weekKey) {\n        alert('無效的週次參數');\n        window.location.href = 'index.html';\n        return;\n    }\n    \n    // 載入 CSV 資料\n    await loadAllCSVData();\n    \n    // 設置週次標題和日期範圍\n    document.getElementById('week-title').textContent = weekKey;\n    \n    // 計算並顯示日期範圍\n    const [year, week] = weekKey.split('-');\n    const weekNumber = parseInt(week.substring(1));\n    const dateRange = getWeekDateRange(weekNumber, year);\n    const entries = getWeekEntries(weekKey) || [];\n    const totalRegularHours = entries.reduce((sum, entry) => sum + (entry.regularHours || 0), 0);\n    const totalOtHours = entries.reduce((sum, entry) => sum + (entry.otHours || 0), 0);\n    const totalHours = entries.reduce((sum, entry) => sum + (entry.ttlHours || entry.TTL_Hours || 0), 0);\n\n    // 將統計資訊加在日期區塊同一行\n    const dateRangeDiv = document.getElementById('date-range');\n    dateRangeDiv.innerHTML =\n        `${formatDate(dateRange.start)} 至 ${formatDate(dateRange.end)}\n        <span style=\"color:#444;font-size:1em;\">\n        總正常工時：${totalRegularHours}\n        總加班工時：${totalOtHours}\n        總工時：${totalHours}\n        </span>`;\n    // 設置日期欄位的限制範圍\n    setDateFieldLimits(dateRange.start, dateRange.end);\n    \n    // (已移除正規化模式狀態顯示)\n \n    // 載入並顯示全域基本資料\n    const basicInfo = loadGlobalBasicInfo();\n    if (basicInfo) {\n        fillBasicInfo(basicInfo);\n        document.querySelector('.basic-info-container').classList.add('basic-info-saved');\n    }\n    \n    // 綁定基本資料表單事件\n    document.getElementById('btn-save-basic-info').addEventListener('click', saveBasicInfo);\n    \n    // 綁定工時記錄表單事件\n    document.getElementById('regularHours').addEventListener('input', calculateTotalHours);\n    document.getElementById('otHours').addEventListener('input', calculateTotalHours);\n    \n    // 綁定按鈕事件\n    document.getElementById('btn-save-entry').addEventListener('click', saveEntry);\n    document.getElementById('btn-cancel-entry').addEventListener('click', clearForm);\n    document.getElementById('btn-clear-form').addEventListener('click', clearForm);\n    document.getElementById('btn-back').addEventListener('click', () => {\n        window.location.href = 'index.html';\n    });\n    \n    // 綁定新增記錄按鈕\n    document.getElementById('btn-add-entry').addEventListener('click', () => {\n        clearForm();\n        document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });\n    });\n    \n    \n    // 渲染工時記錄列表\n    renderEntriesList();\n}\n\n// 檢查是否為編輯頁面並初始化\nif (window.location.pathname.includes('edit.html')) {\n    document.addEventListener('DOMContentLoaded', initEditPage);\n}\n// 隱藏週次選擇模態框\nfunction hideWeekSelectionModal() {\n    const modal = document.getElementById('week-selection-modal');\n    modal.style.display = 'none';\n}\n\n// 確認週次選擇並建立工時表\nfunction confirmWeekSelection() {\n    const selectedOption = document.querySelector('input[name=\"weekOption\"]:checked');\n    \n    if (!selectedOption) {\n        alert('請選擇一個週次選項');\n        return;\n    }\n    \n    let weekKey = '';\n    \n    switch (selectedOption.value) {\n        case 'last':\n            weekKey = getLastWeekKey();\n            break;\n        case 'this':\n            weekKey = getThisWeekKey();\n            break;\n        case 'custom':\n            const customWeek = document.getElementById('custom-week-field').value.trim();\n            if (!customWeek) {\n                alert('請輸入自訂週次');\n                return;\n            }\n            \n            // 驗證格式\n            if (!/^\\d{4}-W\\d{2}$/.test(customWeek)) {\n                alert('週次格式不正確，請使用YYYY-Www格式（例如2024-W25）');\n                return;\n            }\n            \n            weekKey = customWeek;\n            break;\n        default:\n            alert('無效的選項');\n            return;\n    }\n    \n    if (!weekKey) {\n        alert('無法取得週次資訊');\n        return;\n    }\n    \n    // 檢查是否已存在\n    const timesheets = loadAllTimesheets();\n    if (timesheets[weekKey]) {\n        alert(`週次 ${weekKey} 已存在`);\n        return;\n    }\n    \n    // 創建新的工時表\n    timesheets[weekKey] = [];\n    saveAllTimesheets(timesheets);\n    \n    // 隱藏模態框\n    hideWeekSelectionModal();\n    \n    // 重新渲染卡片\n    renderTimesheetCards();\n    \n    // 顯示成功訊息\n    showSuccessMessage(`成功建立週次 ${weekKey} 的工時表`);\n}\n\n// 顯示成功訊息\nfunction showSuccessMessage(message) {\n    // 創建成功訊息元素\n    const successDiv = document.createElement('div');\n    successDiv.className = 'success-message';\n    successDiv.innerHTML = `\n        <div class=\"success-content\">\n            <span class=\"success-icon\">✓</span>\n            <span class=\"success-text\">${message}</span>\n        </div>\n    `;\n    \n    // 添加到頁面\n    document.body.appendChild(successDiv);\n    \n    // 3秒後自動移除\n    setTimeout(() => {\n        if (successDiv.parentNode) {\n            successDiv.parentNode.removeChild(successDiv);\n        }\n    }, 3000);\n}","numLines":1562,"startLine":1,"totalLines":1562}}}
{"parentUuid":"e2a0a272-0413-4c78-aff7-55c84dea3181","isSidechain":false,"userType":"external","cwd":"/home/yanggf/a/timesheet","sessionId":"0bd2a0fb-7842-4575-9d80-0c4bda549680","version":"1.0.30","message":{"id":"msg_01TdRgPzBZEAJ8cMDmk1e16j","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"This appears to be a timesheet management application written in JavaScript. The codebase looks legitimate - it's a tool for tracking work hours, managing timesheets, and exporting data to CSV format. There's no authentication system currently implemented.\n\nWhat kind of authentication would you like to add? Some common options include:\n\n- Simple password protection for the entire app\n- User login/registration system\n- Role-based access (admin vs regular users)\n- Session-based authentication\n- Token-based authentication\n\nPlease let me know what type of authentication you'd like to implement and I'll help you add it to the application."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":23530,"cache_read_input_tokens":13817,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CQK4ZtMZKyL59YicJ6YEG","type":"assistant","uuid":"cec7012b-ad00-4106-8eef-551ed26c313c","timestamp":"2025-06-20T07:16:00.029Z"}
